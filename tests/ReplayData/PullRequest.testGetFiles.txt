https
GET
api.github.com
None
/repos/jacquev6/PyGithub/pulls/31/files
{'Authorization': 'Basic login_and_password_removed', 'User-Agent': 'PyGithub/Python'}
None
200
[('status', '200 OK'), ('x-ratelimit-remaining', '4971'), ('content-length', '169480'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '"a6f83dd38ea0a62d423fefb7b8353561"'), ('date', 'Sun, 27 May 2012 10:21:15 GMT'), ('content-type', 'application/json; charset=utf-8')]
[{"patch":"@@ -70,7 +70,7 @@ def __useAttributes( self, attributes ):\n \n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n {% for attribute in class.attributes|dictsort:\"name\" %}\n-        if \"{{ attribute.name }}\" in attributes and attributes[ \"{{ attribute.name }}\" ] is not None:\n+        if \"{{ attribute.name }}\" in attributes and attributes[ \"{{ attribute.name }}\" ] is not None: # pragma no branch\n \n {% if attribute.type.cardinality == \"scalar\" %}\n {% if attribute.type.simple %}","status":"modified","deletions":1,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/codegen/templates/GithubObject.py","changes":2,"additions":1,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/codegen/templates/GithubObject.py","filename":"codegen/templates/GithubObject.py"},{"patch":"@@ -568,78 +568,78 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"avatar_url\", \"bio\", \"blog\", \"collaborators\", \"company\", \"created_at\", \"disk_usage\", \"email\", \"followers\", \"following\", \"gravatar_id\", \"hireable\", \"html_url\", \"id\", \"location\", \"login\", \"name\", \"owned_private_repos\", \"plan\", \"private_gists\", \"public_gists\", \"public_repos\", \"total_private_repos\", \"type\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"avatar_url\" in attributes and attributes[ \"avatar_url\" ] is not None:\n+        if \"avatar_url\" in attributes and attributes[ \"avatar_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"avatar_url\" ], ( str, unicode ) )\n             self.__avatar_url = attributes[ \"avatar_url\" ]\n-        if \"bio\" in attributes and attributes[ \"bio\" ] is not None:\n+        if \"bio\" in attributes and attributes[ \"bio\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"bio\" ], ( str, unicode ) )\n             self.__bio = attributes[ \"bio\" ]\n-        if \"blog\" in attributes and attributes[ \"blog\" ] is not None:\n+        if \"blog\" in attributes and attributes[ \"blog\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"blog\" ], ( str, unicode ) )\n             self.__blog = attributes[ \"blog\" ]\n-        if \"collaborators\" in attributes and attributes[ \"collaborators\" ] is not None:\n+        if \"collaborators\" in attributes and attributes[ \"collaborators\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"collaborators\" ], int )\n             self.__collaborators = attributes[ \"collaborators\" ]\n-        if \"company\" in attributes and attributes[ \"company\" ] is not None:\n+        if \"company\" in attributes and attributes[ \"company\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"company\" ], ( str, unicode ) )\n             self.__company = attributes[ \"company\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"created_at\" ], ( str, unicode ) )\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"disk_usage\" in attributes and attributes[ \"disk_usage\" ] is not None:\n+        if \"disk_usage\" in attributes and attributes[ \"disk_usage\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"disk_usage\" ], int )\n             self.__disk_usage = attributes[ \"disk_usage\" ]\n-        if \"email\" in attributes and attributes[ \"email\" ] is not None:\n+        if \"email\" in attributes and attributes[ \"email\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"email\" ], ( str, unicode ) )\n             self.__email = attributes[ \"email\" ]\n-        if \"followers\" in attributes and attributes[ \"followers\" ] is not None:\n+        if \"followers\" in attributes and attributes[ \"followers\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"followers\" ], int )\n             self.__followers = attributes[ \"followers\" ]\n-        if \"following\" in attributes and attributes[ \"following\" ] is not None:\n+        if \"following\" in attributes and attributes[ \"following\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"following\" ], int )\n             self.__following = attributes[ \"following\" ]\n-        if \"gravatar_id\" in attributes and attributes[ \"gravatar_id\" ] is not None:\n+        if \"gravatar_id\" in attributes and attributes[ \"gravatar_id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"gravatar_id\" ], ( str, unicode ) )\n             self.__gravatar_id = attributes[ \"gravatar_id\" ]\n-        if \"hireable\" in attributes and attributes[ \"hireable\" ] is not None:\n+        if \"hireable\" in attributes and attributes[ \"hireable\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"hireable\" ], bool )\n             self.__hireable = attributes[ \"hireable\" ]\n-        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None:\n+        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"html_url\" ], ( str, unicode ) )\n             self.__html_url = attributes[ \"html_url\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"id\" ], int )\n             self.__id = attributes[ \"id\" ]\n-        if \"location\" in attributes and attributes[ \"location\" ] is not None:\n+        if \"location\" in attributes and attributes[ \"location\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"location\" ], ( str, unicode ) )\n             self.__location = attributes[ \"location\" ]\n-        if \"login\" in attributes and attributes[ \"login\" ] is not None:\n+        if \"login\" in attributes and attributes[ \"login\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"login\" ], ( str, unicode ) )\n             self.__login = attributes[ \"login\" ]\n-        if \"name\" in attributes and attributes[ \"name\" ] is not None:\n+        if \"name\" in attributes and attributes[ \"name\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"name\" ], ( str, unicode ) )\n             self.__name = attributes[ \"name\" ]\n-        if \"owned_private_repos\" in attributes and attributes[ \"owned_private_repos\" ] is not None:\n+        if \"owned_private_repos\" in attributes and attributes[ \"owned_private_repos\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"owned_private_repos\" ], int )\n             self.__owned_private_repos = attributes[ \"owned_private_repos\" ]\n-        if \"plan\" in attributes and attributes[ \"plan\" ] is not None:\n+        if \"plan\" in attributes and attributes[ \"plan\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"plan\" ], dict )\n             self.__plan = Plan.Plan( self.__requester, attributes[ \"plan\" ], completion = LazyCompletion )\n-        if \"private_gists\" in attributes and attributes[ \"private_gists\" ] is not None:\n+        if \"private_gists\" in attributes and attributes[ \"private_gists\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"private_gists\" ], int )\n             self.__private_gists = attributes[ \"private_gists\" ]\n-        if \"public_gists\" in attributes and attributes[ \"public_gists\" ] is not None:\n+        if \"public_gists\" in attributes and attributes[ \"public_gists\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"public_gists\" ], int )\n             self.__public_gists = attributes[ \"public_gists\" ]\n-        if \"public_repos\" in attributes and attributes[ \"public_repos\" ] is not None:\n+        if \"public_repos\" in attributes and attributes[ \"public_repos\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"public_repos\" ], int )\n             self.__public_repos = attributes[ \"public_repos\" ]\n-        if \"total_private_repos\" in attributes and attributes[ \"total_private_repos\" ] is not None:\n+        if \"total_private_repos\" in attributes and attributes[ \"total_private_repos\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"total_private_repos\" ], int )\n             self.__total_private_repos = attributes[ \"total_private_repos\" ]\n-        if \"type\" in attributes and attributes[ \"type\" ] is not None:\n+        if \"type\" in attributes and attributes[ \"type\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"type\" ], ( str, unicode ) )\n             self.__type = attributes[ \"type\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":25,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/AuthenticatedUser.py","changes":50,"additions":25,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/AuthenticatedUser.py","filename":"src/github/AuthenticatedUser.py"},{"patch":"@@ -117,21 +117,21 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"app\", \"created_at\", \"id\", \"note\", \"note_url\", \"scopes\", \"token\", \"updated_at\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"app\" in attributes and attributes[ \"app\" ] is not None:\n+        if \"app\" in attributes and attributes[ \"app\" ] is not None: # pragma no branch\n             self.__app = attributes[ \"app\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             self.__id = attributes[ \"id\" ]\n-        if \"note\" in attributes and attributes[ \"note\" ] is not None:\n+        if \"note\" in attributes and attributes[ \"note\" ] is not None: # pragma no branch\n             self.__note = attributes[ \"note\" ]\n-        if \"note_url\" in attributes and attributes[ \"note_url\" ] is not None:\n+        if \"note_url\" in attributes and attributes[ \"note_url\" ] is not None: # pragma no branch\n             self.__note_url = attributes[ \"note_url\" ]\n-        if \"scopes\" in attributes and attributes[ \"scopes\" ] is not None:\n+        if \"scopes\" in attributes and attributes[ \"scopes\" ] is not None: # pragma no branch\n             self.__scopes = attributes[ \"scopes\" ]\n-        if \"token\" in attributes and attributes[ \"token\" ] is not None:\n+        if \"token\" in attributes and attributes[ \"token\" ] is not None: # pragma no branch\n             self.__token = attributes[ \"token\" ]\n-        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None:\n+        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None: # pragma no branch\n             self.__updated_at = attributes[ \"updated_at\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":9,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Authorization.py","changes":18,"additions":9,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Authorization.py","filename":"src/github/Authorization.py"},{"patch":"@@ -28,9 +28,9 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"commit\", \"name\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"commit\" in attributes and attributes[ \"commit\" ] is not None:\n+        if \"commit\" in attributes and attributes[ \"commit\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"commit\" ], dict )\n             self.__commit = Commit.Commit( self.__requester, attributes[ \"commit\" ], completion = LazyCompletion )\n-        if \"name\" in attributes and attributes[ \"name\" ] is not None:\n+        if \"name\" in attributes and attributes[ \"name\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"name\" ], ( str, unicode ) )\n             self.__name = attributes[ \"name\" ]","status":"modified","deletions":2,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Branch.py","changes":4,"additions":2,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Branch.py","filename":"src/github/Branch.py"},{"patch":"@@ -120,33 +120,33 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"author\", \"commit\", \"committer\", \"files\", \"parents\", \"sha\", \"stats\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"author\" in attributes and attributes[ \"author\" ] is not None:\n+        if \"author\" in attributes and attributes[ \"author\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"author\" ], dict )\n             self.__author = NamedUser.NamedUser( self.__requester, attributes[ \"author\" ], completion = LazyCompletion )\n-        if \"commit\" in attributes and attributes[ \"commit\" ] is not None:\n+        if \"commit\" in attributes and attributes[ \"commit\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"commit\" ], dict )\n             self.__commit = GitCommit.GitCommit( self.__requester, attributes[ \"commit\" ], completion = LazyCompletion )\n-        if \"committer\" in attributes and attributes[ \"committer\" ] is not None:\n+        if \"committer\" in attributes and attributes[ \"committer\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"committer\" ], dict )\n             self.__committer = NamedUser.NamedUser( self.__requester, attributes[ \"committer\" ], completion = LazyCompletion )\n-        if \"files\" in attributes and attributes[ \"files\" ] is not None:\n+        if \"files\" in attributes and attributes[ \"files\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"files\" ], list ) and ( len( attributes[ \"files\" ] ) == 0 or isinstance( attributes[ \"files\" ][ 0 ], dict ) )\n             self.__files = [\n                 CommitFile.CommitFile( self.__requester, element, completion = LazyCompletion )\n                 for element in attributes[ \"files\" ]\n             ]\n-        if \"parents\" in attributes and attributes[ \"parents\" ] is not None:\n+        if \"parents\" in attributes and attributes[ \"parents\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"parents\" ], list ) and ( len( attributes[ \"parents\" ] ) == 0 or isinstance( attributes[ \"parents\" ][ 0 ], dict ) )\n             self.__parents = [\n                 Commit( self.__requester, element, completion = LazyCompletion )\n                 for element in attributes[ \"parents\" ]\n             ]\n-        if \"sha\" in attributes and attributes[ \"sha\" ] is not None:\n+        if \"sha\" in attributes and attributes[ \"sha\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"sha\" ], ( str, unicode ) )\n             self.__sha = attributes[ \"sha\" ]\n-        if \"stats\" in attributes and attributes[ \"stats\" ] is not None:\n+        if \"stats\" in attributes and attributes[ \"stats\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"stats\" ], dict )\n             self.__stats = CommitStats.CommitStats( self.__requester, attributes[ \"stats\" ], completion = LazyCompletion )\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":8,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Commit.py","changes":16,"additions":8,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Commit.py","filename":"src/github/Commit.py"},{"patch":"@@ -121,36 +121,36 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"body\", \"commit_id\", \"created_at\", \"html_url\", \"id\", \"line\", \"path\", \"position\", \"updated_at\", \"url\", \"user\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"body\" in attributes and attributes[ \"body\" ] is not None:\n+        if \"body\" in attributes and attributes[ \"body\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"body\" ], ( str, unicode ) )\n             self.__body = attributes[ \"body\" ]\n-        if \"commit_id\" in attributes and attributes[ \"commit_id\" ] is not None:\n+        if \"commit_id\" in attributes and attributes[ \"commit_id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"commit_id\" ], ( str, unicode ) )\n             self.__commit_id = attributes[ \"commit_id\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"created_at\" ], ( str, unicode ) )\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None:\n+        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"html_url\" ], ( str, unicode ) )\n             self.__html_url = attributes[ \"html_url\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"id\" ], int )\n             self.__id = attributes[ \"id\" ]\n-        if \"line\" in attributes and attributes[ \"line\" ] is not None:\n+        if \"line\" in attributes and attributes[ \"line\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"line\" ], int )\n             self.__line = attributes[ \"line\" ]\n-        if \"path\" in attributes and attributes[ \"path\" ] is not None:\n+        if \"path\" in attributes and attributes[ \"path\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"path\" ], ( str, unicode ) )\n             self.__path = attributes[ \"path\" ]\n-        if \"position\" in attributes and attributes[ \"position\" ] is not None:\n+        if \"position\" in attributes and attributes[ \"position\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"position\" ], int )\n             self.__position = attributes[ \"position\" ]\n-        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None:\n+        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"updated_at\" ], ( str, unicode ) )\n             self.__updated_at = attributes[ \"updated_at\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]\n-        if \"user\" in attributes and attributes[ \"user\" ] is not None:\n+        if \"user\" in attributes and attributes[ \"user\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"user\" ], dict )\n             self.__user = NamedUser.NamedUser( self.__requester, attributes[ \"user\" ], completion = LazyCompletion )","status":"modified","deletions":11,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/CommitComment.py","changes":22,"additions":11,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/CommitComment.py","filename":"src/github/CommitComment.py"},{"patch":"@@ -62,21 +62,21 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"additions\", \"blob_url\", \"changes\", \"deletions\", \"filename\", \"patch\", \"raw_url\", \"sha\", \"status\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"additions\" in attributes and attributes[ \"additions\" ] is not None:\n+        if \"additions\" in attributes and attributes[ \"additions\" ] is not None: # pragma no branch\n             self.__additions = attributes[ \"additions\" ]\n-        if \"blob_url\" in attributes and attributes[ \"blob_url\" ] is not None:\n+        if \"blob_url\" in attributes and attributes[ \"blob_url\" ] is not None: # pragma no branch\n             self.__blob_url = attributes[ \"blob_url\" ]\n-        if \"changes\" in attributes and attributes[ \"changes\" ] is not None:\n+        if \"changes\" in attributes and attributes[ \"changes\" ] is not None: # pragma no branch\n             self.__changes = attributes[ \"changes\" ]\n-        if \"deletions\" in attributes and attributes[ \"deletions\" ] is not None:\n+        if \"deletions\" in attributes and attributes[ \"deletions\" ] is not None: # pragma no branch\n             self.__deletions = attributes[ \"deletions\" ]\n-        if \"filename\" in attributes and attributes[ \"filename\" ] is not None:\n+        if \"filename\" in attributes and attributes[ \"filename\" ] is not None: # pragma no branch\n             self.__filename = attributes[ \"filename\" ]\n-        if \"patch\" in attributes and attributes[ \"patch\" ] is not None:\n+        if \"patch\" in attributes and attributes[ \"patch\" ] is not None: # pragma no branch\n             self.__patch = attributes[ \"patch\" ]\n-        if \"raw_url\" in attributes and attributes[ \"raw_url\" ] is not None:\n+        if \"raw_url\" in attributes and attributes[ \"raw_url\" ] is not None: # pragma no branch\n             self.__raw_url = attributes[ \"raw_url\" ]\n-        if \"sha\" in attributes and attributes[ \"sha\" ] is not None:\n+        if \"sha\" in attributes and attributes[ \"sha\" ] is not None: # pragma no branch\n             self.__sha = attributes[ \"sha\" ]\n-        if \"status\" in attributes and attributes[ \"status\" ] is not None:\n+        if \"status\" in attributes and attributes[ \"status\" ] is not None: # pragma no branch\n             self.__status = attributes[ \"status\" ]","status":"modified","deletions":9,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/CommitFile.py","changes":18,"additions":9,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/CommitFile.py","filename":"src/github/CommitFile.py"},{"patch":"@@ -32,12 +32,12 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"additions\", \"deletions\", \"total\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"additions\" in attributes and attributes[ \"additions\" ] is not None:\n+        if \"additions\" in attributes and attributes[ \"additions\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"additions\" ], int )\n             self.__additions = attributes[ \"additions\" ]\n-        if \"deletions\" in attributes and attributes[ \"deletions\" ] is not None:\n+        if \"deletions\" in attributes and attributes[ \"deletions\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"deletions\" ], int )\n             self.__deletions = attributes[ \"deletions\" ]\n-        if \"total\" in attributes and attributes[ \"total\" ] is not None:\n+        if \"total\" in attributes and attributes[ \"total\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"total\" ], int )\n             self.__total = attributes[ \"total\" ]","status":"modified","deletions":3,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/CommitStats.py","changes":6,"additions":3,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/CommitStats.py","filename":"src/github/CommitStats.py"},{"patch":"@@ -162,43 +162,43 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"accesskeyid\", \"acl\", \"bucket\", \"content_type\", \"created_at\", \"description\", \"download_count\", \"expirationdate\", \"html_url\", \"id\", \"mime_type\", \"name\", \"path\", \"policy\", \"prefix\", \"redirect\", \"s3_url\", \"signature\", \"size\", \"url\", \"x-amz-meta-content-disposition\" ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"accesskeyid\" in attributes and attributes[ \"accesskeyid\" ] is not None:\n+        if \"accesskeyid\" in attributes and attributes[ \"accesskeyid\" ] is not None: # pragma no branch\n             self.__accesskeyid = attributes[ \"accesskeyid\" ]\n-        if \"acl\" in attributes and attributes[ \"acl\" ] is not None:\n+        if \"acl\" in attributes and attributes[ \"acl\" ] is not None: # pragma no branch\n             self.__acl = attributes[ \"acl\" ]\n-        if \"bucket\" in attributes and attributes[ \"bucket\" ] is not None:\n+        if \"bucket\" in attributes and attributes[ \"bucket\" ] is not None: # pragma no branch\n             self.__bucket = attributes[ \"bucket\" ]\n-        if \"content_type\" in attributes and attributes[ \"content_type\" ] is not None:\n+        if \"content_type\" in attributes and attributes[ \"content_type\" ] is not None: # pragma no branch\n             self.__content_type = attributes[ \"content_type\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"description\" in attributes and attributes[ \"description\" ] is not None:\n+        if \"description\" in attributes and attributes[ \"description\" ] is not None: # pragma no branch\n             self.__description = attributes[ \"description\" ]\n-        if \"download_count\" in attributes and attributes[ \"download_count\" ] is not None:\n+        if \"download_count\" in attributes and attributes[ \"download_count\" ] is not None: # pragma no branch\n             self.__download_count = attributes[ \"download_count\" ]\n-        if \"expirationdate\" in attributes and attributes[ \"expirationdate\" ] is not None:\n+        if \"expirationdate\" in attributes and attributes[ \"expirationdate\" ] is not None: # pragma no branch\n             self.__expirationdate = attributes[ \"expirationdate\" ]\n-        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None:\n+        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None: # pragma no branch\n             self.__html_url = attributes[ \"html_url\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             self.__id = attributes[ \"id\" ]\n-        if \"mime_type\" in attributes and attributes[ \"mime_type\" ] is not None:\n+        if \"mime_type\" in attributes and attributes[ \"mime_type\" ] is not None: # pragma no branch\n             self.__mime_type = attributes[ \"mime_type\" ]\n-        if \"name\" in attributes and attributes[ \"name\" ] is not None:\n+        if \"name\" in attributes and attributes[ \"name\" ] is not None: # pragma no branch\n             self.__name = attributes[ \"name\" ]\n-        if \"path\" in attributes and attributes[ \"path\" ] is not None:\n+        if \"path\" in attributes and attributes[ \"path\" ] is not None: # pragma no branch\n             self.__path = attributes[ \"path\" ]\n-        if \"policy\" in attributes and attributes[ \"policy\" ] is not None:\n+        if \"policy\" in attributes and attributes[ \"policy\" ] is not None: # pragma no branch\n             self.__policy = attributes[ \"policy\" ]\n-        if \"prefix\" in attributes and attributes[ \"prefix\" ] is not None:\n+        if \"prefix\" in attributes and attributes[ \"prefix\" ] is not None: # pragma no branch\n             self.__prefix = attributes[ \"prefix\" ]\n-        if \"redirect\" in attributes and attributes[ \"redirect\" ] is not None:\n+        if \"redirect\" in attributes and attributes[ \"redirect\" ] is not None: # pragma no branch\n             self.__redirect = attributes[ \"redirect\" ]\n-        if \"s3_url\" in attributes and attributes[ \"s3_url\" ] is not None:\n+        if \"s3_url\" in attributes and attributes[ \"s3_url\" ] is not None: # pragma no branch\n             self.__s3_url = attributes[ \"s3_url\" ]\n-        if \"signature\" in attributes and attributes[ \"signature\" ] is not None:\n+        if \"signature\" in attributes and attributes[ \"signature\" ] is not None: # pragma no branch\n             self.__signature = attributes[ \"signature\" ]\n-        if \"size\" in attributes and attributes[ \"size\" ] is not None:\n+        if \"size\" in attributes and attributes[ \"size\" ] is not None: # pragma no branch\n             self.__size = attributes[ \"size\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":20,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Download.py","changes":40,"additions":20,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Download.py","filename":"src/github/Download.py"},{"patch":"@@ -60,22 +60,22 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"actor\", \"created_at\", \"id\", \"org\", \"payload\", \"public\", \"repo\", \"type\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"actor\" in attributes and attributes[ \"actor\" ] is not None:\n+        if \"actor\" in attributes and attributes[ \"actor\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"actor\" ], dict )\n             self.__actor = NamedUser.NamedUser( self.__requester, attributes[ \"actor\" ], completion = LazyCompletion )\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             self.__id = attributes[ \"id\" ]\n-        if \"org\" in attributes and attributes[ \"org\" ] is not None:\n+        if \"org\" in attributes and attributes[ \"org\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"org\" ], dict )\n             self.__org = Organization.Organization( self.__requester, attributes[ \"org\" ], completion = LazyCompletion )\n-        if \"payload\" in attributes and attributes[ \"payload\" ] is not None:\n+        if \"payload\" in attributes and attributes[ \"payload\" ] is not None: # pragma no branch\n             self.__payload = attributes[ \"payload\" ]\n-        if \"public\" in attributes and attributes[ \"public\" ] is not None:\n+        if \"public\" in attributes and attributes[ \"public\" ] is not None: # pragma no branch\n             self.__public = attributes[ \"public\" ]\n-        if \"repo\" in attributes and attributes[ \"repo\" ] is not None:\n+        if \"repo\" in attributes and attributes[ \"repo\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"repo\" ], dict )\n             self.__repo = Repository.Repository( self.__requester, attributes[ \"repo\" ], completion = LazyCompletion )\n-        if \"type\" in attributes and attributes[ \"type\" ] is not None:\n+        if \"type\" in attributes and attributes[ \"type\" ] is not None: # pragma no branch\n             self.__type = attributes[ \"type\" ]","status":"modified","deletions":8,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Event.py","changes":16,"additions":8,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Event.py","filename":"src/github/Event.py"},{"patch":"@@ -220,53 +220,53 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"comments\", \"created_at\", \"description\", \"files\", \"fork_of\", \"forks\", \"git_pull_url\", \"git_push_url\", \"history\", \"html_url\", \"id\", \"public\", \"updated_at\", \"url\", \"user\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"comments\" in attributes and attributes[ \"comments\" ] is not None:\n+        if \"comments\" in attributes and attributes[ \"comments\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"comments\" ], int )\n             self.__comments = attributes[ \"comments\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"created_at\" ], ( str, unicode ) )\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"description\" in attributes and attributes[ \"description\" ] is not None:\n+        if \"description\" in attributes and attributes[ \"description\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"description\" ], ( str, unicode ) )\n             self.__description = attributes[ \"description\" ]\n-        if \"files\" in attributes and attributes[ \"files\" ] is not None:\n+        if \"files\" in attributes and attributes[ \"files\" ] is not None: # pragma no branch\n             self.__files = attributes[ \"files\" ]\n-        if \"fork_of\" in attributes and attributes[ \"fork_of\" ] is not None:\n+        if \"fork_of\" in attributes and attributes[ \"fork_of\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"fork_of\" ], dict )\n             self.__fork_of = Gist( self.__requester, attributes[ \"fork_of\" ], completion = LazyCompletion )\n-        if \"forks\" in attributes and attributes[ \"forks\" ] is not None:\n+        if \"forks\" in attributes and attributes[ \"forks\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"forks\" ], list ) and ( len( attributes[ \"forks\" ] ) == 0 or isinstance( attributes[ \"forks\" ][ 0 ], dict ) )\n             self.__forks = [\n                 Gist( self.__requester, element, completion = LazyCompletion )\n                 for element in attributes[ \"forks\" ]\n             ]\n-        if \"git_pull_url\" in attributes and attributes[ \"git_pull_url\" ] is not None:\n+        if \"git_pull_url\" in attributes and attributes[ \"git_pull_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"git_pull_url\" ], ( str, unicode ) )\n             self.__git_pull_url = attributes[ \"git_pull_url\" ]\n-        if \"git_push_url\" in attributes and attributes[ \"git_push_url\" ] is not None:\n+        if \"git_push_url\" in attributes and attributes[ \"git_push_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"git_push_url\" ], ( str, unicode ) )\n             self.__git_push_url = attributes[ \"git_push_url\" ]\n-        if \"history\" in attributes and attributes[ \"history\" ] is not None:\n+        if \"history\" in attributes and attributes[ \"history\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"history\" ], list ) and ( len( attributes[ \"history\" ] ) == 0 or isinstance( attributes[ \"history\" ][ 0 ], dict ) )\n             self.__history = [\n                 GistHistoryState.GistHistoryState( self.__requester, element, completion = LazyCompletion )\n                 for element in attributes[ \"history\" ]\n             ]\n-        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None:\n+        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"html_url\" ], ( str, unicode ) )\n             self.__html_url = attributes[ \"html_url\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"id\" ], ( str, unicode ) )\n             self.__id = attributes[ \"id\" ]\n-        if \"public\" in attributes and attributes[ \"public\" ] is not None:\n+        if \"public\" in attributes and attributes[ \"public\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"public\" ], bool )\n             self.__public = attributes[ \"public\" ]\n-        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None:\n+        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"updated_at\" ], ( str, unicode ) )\n             self.__updated_at = attributes[ \"updated_at\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]\n-        if \"user\" in attributes and attributes[ \"user\" ] is not None:\n+        if \"user\" in attributes and attributes[ \"user\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"user\" ], dict )\n             self.__user = NamedUser.NamedUser( self.__requester, attributes[ \"user\" ], completion = LazyCompletion )","status":"modified","deletions":15,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Gist.py","changes":30,"additions":15,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Gist.py","filename":"src/github/Gist.py"},{"patch":"@@ -68,16 +68,16 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"body\", \"created_at\", \"id\", \"updated_at\", \"url\", \"user\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"body\" in attributes and attributes[ \"body\" ] is not None:\n+        if \"body\" in attributes and attributes[ \"body\" ] is not None: # pragma no branch\n             self.__body = attributes[ \"body\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             self.__id = attributes[ \"id\" ]\n-        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None:\n+        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None: # pragma no branch\n             self.__updated_at = attributes[ \"updated_at\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             self.__url = attributes[ \"url\" ]\n-        if \"user\" in attributes and attributes[ \"user\" ] is not None:\n+        if \"user\" in attributes and attributes[ \"user\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"user\" ], dict )\n             self.__user = NamedUser.NamedUser( self.__requester, attributes[ \"user\" ], completion = LazyCompletion )","status":"modified","deletions":6,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GistComment.py","changes":12,"additions":6,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GistComment.py","filename":"src/github/GistComment.py"},{"patch":"@@ -44,18 +44,18 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"change_status\", \"committed_at\", \"url\", \"user\", \"version\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"change_status\" in attributes and attributes[ \"change_status\" ] is not None:\n+        if \"change_status\" in attributes and attributes[ \"change_status\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"change_status\" ], dict )\n             self.__change_status = CommitStats.CommitStats( self.__requester, attributes[ \"change_status\" ], completion = LazyCompletion )\n-        if \"committed_at\" in attributes and attributes[ \"committed_at\" ] is not None:\n+        if \"committed_at\" in attributes and attributes[ \"committed_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"committed_at\" ], ( str, unicode ) )\n             self.__committed_at = attributes[ \"committed_at\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]\n-        if \"user\" in attributes and attributes[ \"user\" ] is not None:\n+        if \"user\" in attributes and attributes[ \"user\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"user\" ], dict )\n             self.__user = NamedUser.NamedUser( self.__requester, attributes[ \"user\" ], completion = LazyCompletion )\n-        if \"version\" in attributes and attributes[ \"version\" ] is not None:\n+        if \"version\" in attributes and attributes[ \"version\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"version\" ], ( str, unicode ) )\n             self.__version = attributes[ \"version\" ]","status":"modified","deletions":5,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GistHistoryState.py","changes":10,"additions":5,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GistHistoryState.py","filename":"src/github/GistHistoryState.py"},{"patch":"@@ -32,12 +32,12 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"date\", \"email\", \"name\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"date\" in attributes and attributes[ \"date\" ] is not None:\n+        if \"date\" in attributes and attributes[ \"date\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"date\" ], ( str, unicode ) )\n             self.__date = attributes[ \"date\" ]\n-        if \"email\" in attributes and attributes[ \"email\" ] is not None:\n+        if \"email\" in attributes and attributes[ \"email\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"email\" ], ( str, unicode ) )\n             self.__email = attributes[ \"email\" ]\n-        if \"name\" in attributes and attributes[ \"name\" ] is not None:\n+        if \"name\" in attributes and attributes[ \"name\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"name\" ], ( str, unicode ) )\n             self.__name = attributes[ \"name\" ]","status":"modified","deletions":3,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitAuthor.py","changes":6,"additions":3,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitAuthor.py","filename":"src/github/GitAuthor.py"},{"patch":"@@ -42,18 +42,18 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"content\", \"encoding\", \"sha\", \"size\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"content\" in attributes and attributes[ \"content\" ] is not None:\n+        if \"content\" in attributes and attributes[ \"content\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"content\" ], ( str, unicode ) )\n             self.__content = attributes[ \"content\" ]\n-        if \"encoding\" in attributes and attributes[ \"encoding\" ] is not None:\n+        if \"encoding\" in attributes and attributes[ \"encoding\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"encoding\" ], ( str, unicode ) )\n             self.__encoding = attributes[ \"encoding\" ]\n-        if \"sha\" in attributes and attributes[ \"sha\" ] is not None:\n+        if \"sha\" in attributes and attributes[ \"sha\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"sha\" ], ( str, unicode ) )\n             self.__sha = attributes[ \"sha\" ]\n-        if \"size\" in attributes and attributes[ \"size\" ] is not None:\n+        if \"size\" in attributes and attributes[ \"size\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"size\" ], int )\n             self.__size = attributes[ \"size\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":5,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitBlob.py","changes":10,"additions":5,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitBlob.py","filename":"src/github/GitBlob.py"},{"patch":"@@ -55,27 +55,27 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"author\", \"committer\", \"message\", \"parents\", \"sha\", \"tree\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"author\" in attributes and attributes[ \"author\" ] is not None:\n+        if \"author\" in attributes and attributes[ \"author\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"author\" ], dict )\n             self.__author = GitAuthor.GitAuthor( self.__requester, attributes[ \"author\" ], completion = LazyCompletion )\n-        if \"committer\" in attributes and attributes[ \"committer\" ] is not None:\n+        if \"committer\" in attributes and attributes[ \"committer\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"committer\" ], dict )\n             self.__committer = GitAuthor.GitAuthor( self.__requester, attributes[ \"committer\" ], completion = LazyCompletion )\n-        if \"message\" in attributes and attributes[ \"message\" ] is not None:\n+        if \"message\" in attributes and attributes[ \"message\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"message\" ], ( str, unicode ) )\n             self.__message = attributes[ \"message\" ]\n-        if \"parents\" in attributes and attributes[ \"parents\" ] is not None:\n+        if \"parents\" in attributes and attributes[ \"parents\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"parents\" ], list ) and ( len( attributes[ \"parents\" ] ) == 0 or isinstance( attributes[ \"parents\" ][ 0 ], dict ) )\n             self.__parents = [\n                 GitCommit( self.__requester, element, completion = LazyCompletion )\n                 for element in attributes[ \"parents\" ]\n             ]\n-        if \"sha\" in attributes and attributes[ \"sha\" ] is not None:\n+        if \"sha\" in attributes and attributes[ \"sha\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"sha\" ], ( str, unicode ) )\n             self.__sha = attributes[ \"sha\" ]\n-        if \"tree\" in attributes and attributes[ \"tree\" ] is not None:\n+        if \"tree\" in attributes and attributes[ \"tree\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"tree\" ], dict )\n             self.__tree = GitTree.GitTree( self.__requester, attributes[ \"tree\" ], completion = LazyCompletion )\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":7,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitCommit.py","changes":14,"additions":7,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitCommit.py","filename":"src/github/GitCommit.py"},{"patch":"@@ -32,12 +32,12 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"sha\", \"type\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"sha\" in attributes and attributes[ \"sha\" ] is not None:\n+        if \"sha\" in attributes and attributes[ \"sha\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"sha\" ], ( str, unicode ) )\n             self.__sha = attributes[ \"sha\" ]\n-        if \"type\" in attributes and attributes[ \"type\" ] is not None:\n+        if \"type\" in attributes and attributes[ \"type\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"type\" ], ( str, unicode ) )\n             self.__type = attributes[ \"type\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":3,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitObject.py","changes":6,"additions":3,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitObject.py","filename":"src/github/GitObject.py"},{"patch":"@@ -55,12 +55,12 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"object\", \"ref\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"object\" in attributes and attributes[ \"object\" ] is not None:\n+        if \"object\" in attributes and attributes[ \"object\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"object\" ], dict )\n             self.__object = GitObject.GitObject( self.__requester, attributes[ \"object\" ], completion = LazyCompletion )\n-        if \"ref\" in attributes and attributes[ \"ref\" ] is not None:\n+        if \"ref\" in attributes and attributes[ \"ref\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"ref\" ], ( str, unicode ) )\n             self.__ref = attributes[ \"ref\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":3,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitRef.py","changes":6,"additions":3,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitRef.py","filename":"src/github/GitRef.py"},{"patch":"@@ -49,21 +49,21 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"message\", \"object\", \"sha\", \"tag\", \"tagger\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"message\" in attributes and attributes[ \"message\" ] is not None:\n+        if \"message\" in attributes and attributes[ \"message\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"message\" ], ( str, unicode ) )\n             self.__message = attributes[ \"message\" ]\n-        if \"object\" in attributes and attributes[ \"object\" ] is not None:\n+        if \"object\" in attributes and attributes[ \"object\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"object\" ], dict )\n             self.__object = GitObject.GitObject( self.__requester, attributes[ \"object\" ], completion = LazyCompletion )\n-        if \"sha\" in attributes and attributes[ \"sha\" ] is not None:\n+        if \"sha\" in attributes and attributes[ \"sha\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"sha\" ], ( str, unicode ) )\n             self.__sha = attributes[ \"sha\" ]\n-        if \"tag\" in attributes and attributes[ \"tag\" ] is not None:\n+        if \"tag\" in attributes and attributes[ \"tag\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"tag\" ], ( str, unicode ) )\n             self.__tag = attributes[ \"tag\" ]\n-        if \"tagger\" in attributes and attributes[ \"tagger\" ] is not None:\n+        if \"tagger\" in attributes and attributes[ \"tagger\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"tagger\" ], dict )\n             self.__tagger = GitAuthor.GitAuthor( self.__requester, attributes[ \"tagger\" ], completion = LazyCompletion )\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":6,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitTag.py","changes":12,"additions":6,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitTag.py","filename":"src/github/GitTag.py"},{"patch":"@@ -33,15 +33,15 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"sha\", \"tree\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"sha\" in attributes and attributes[ \"sha\" ] is not None:\n+        if \"sha\" in attributes and attributes[ \"sha\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"sha\" ], ( str, unicode ) )\n             self.__sha = attributes[ \"sha\" ]\n-        if \"tree\" in attributes and attributes[ \"tree\" ] is not None:\n+        if \"tree\" in attributes and attributes[ \"tree\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"tree\" ], list ) and ( len( attributes[ \"tree\" ] ) == 0 or isinstance( attributes[ \"tree\" ][ 0 ], dict ) )\n             self.__tree = [\n                 GitTreeElement.GitTreeElement( self.__requester, element, completion = LazyCompletion )\n                 for element in attributes[ \"tree\" ]\n             ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":3,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitTree.py","changes":6,"additions":3,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitTree.py","filename":"src/github/GitTree.py"},{"patch":"@@ -47,21 +47,21 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"mode\", \"path\", \"sha\", \"size\", \"type\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"mode\" in attributes and attributes[ \"mode\" ] is not None:\n+        if \"mode\" in attributes and attributes[ \"mode\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"mode\" ], ( str, unicode ) )\n             self.__mode = attributes[ \"mode\" ]\n-        if \"path\" in attributes and attributes[ \"path\" ] is not None:\n+        if \"path\" in attributes and attributes[ \"path\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"path\" ], ( str, unicode ) )\n             self.__path = attributes[ \"path\" ]\n-        if \"sha\" in attributes and attributes[ \"sha\" ] is not None:\n+        if \"sha\" in attributes and attributes[ \"sha\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"sha\" ], ( str, unicode ) )\n             self.__sha = attributes[ \"sha\" ]\n-        if \"size\" in attributes and attributes[ \"size\" ] is not None:\n+        if \"size\" in attributes and attributes[ \"size\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"size\" ], int )\n             self.__size = attributes[ \"size\" ]\n-        if \"type\" in attributes and attributes[ \"type\" ] is not None:\n+        if \"type\" in attributes and attributes[ \"type\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"type\" ], ( str, unicode ) )\n             self.__type = attributes[ \"type\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":6,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitTreeElement.py","changes":12,"additions":6,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/GitTreeElement.py","filename":"src/github/GitTreeElement.py"},{"patch":"@@ -99,21 +99,21 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"active\", \"config\", \"created_at\", \"events\", \"id\", \"last_response\", \"name\", \"updated_at\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"active\" in attributes and attributes[ \"active\" ] is not None:\n+        if \"active\" in attributes and attributes[ \"active\" ] is not None: # pragma no branch\n             self.__active = attributes[ \"active\" ]\n-        if \"config\" in attributes and attributes[ \"config\" ] is not None:\n+        if \"config\" in attributes and attributes[ \"config\" ] is not None: # pragma no branch\n             self.__config = attributes[ \"config\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"events\" in attributes and attributes[ \"events\" ] is not None:\n+        if \"events\" in attributes and attributes[ \"events\" ] is not None: # pragma no branch\n             self.__events = attributes[ \"events\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             self.__id = attributes[ \"id\" ]\n-        if \"last_response\" in attributes and attributes[ \"last_response\" ] is not None:\n+        if \"last_response\" in attributes and attributes[ \"last_response\" ] is not None: # pragma no branch\n             self.__last_response = attributes[ \"last_response\" ]\n-        if \"name\" in attributes and attributes[ \"name\" ] is not None:\n+        if \"name\" in attributes and attributes[ \"name\" ] is not None: # pragma no branch\n             self.__name = attributes[ \"name\" ]\n-        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None:\n+        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None: # pragma no branch\n             self.__updated_at = attributes[ \"updated_at\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":9,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Hook.py","changes":18,"additions":9,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Hook.py","filename":"src/github/Hook.py"},{"patch":"@@ -110,7 +110,7 @@ def user( self ):\n         return self.__user\n \n     def add_to_labels( self, *labels ):\n-        post_parameters = labels\n+        post_parameters = [ label.name for label in labels ]\n         status, headers, data = self.__requester.request(\n             \"POST\",\n             str( self.url ) + \"/labels\",\n@@ -131,7 +131,12 @@ def create_comment( self, body ):\n         return IssueComment.IssueComment( self.__requester, data, completion = NoCompletion )\n \n     def delete_labels( self ):\n-        pass\n+        status, headers, data = self.__requester.request(\n+            \"DELETE\",\n+            str( self.url ) + \"/labels\",\n+            None,\n+            None\n+        )\n \n     def edit( self, title = DefaultValueForOptionalParameters, body = DefaultValueForOptionalParameters, assignee = DefaultValueForOptionalParameters, state = DefaultValueForOptionalParameters, milestone = DefaultValueForOptionalParameters, labels = DefaultValueForOptionalParameters ):\n         post_parameters = {\n@@ -216,7 +221,13 @@ def remove_from_labels( self, label ):\n         )\n \n     def set_labels( self, *labels ):\n-        pass\n+        post_parameters = [ label.name for label in labels ]\n+        status, headers, data = self.__requester.request(\n+            \"PUT\",\n+            str( self.url ) + \"/labels\",\n+            None,\n+            post_parameters\n+        )\n \n     def __initAttributes( self ):\n         self.__assignee = None\n@@ -257,59 +268,59 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"assignee\", \"body\", \"closed_at\", \"closed_by\", \"comments\", \"created_at\", \"html_url\", \"id\", \"labels\", \"milestone\", \"number\", \"pull_request\", \"repository\", \"state\", \"title\", \"updated_at\", \"url\", \"user\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"assignee\" in attributes and attributes[ \"assignee\" ] is not None:\n+        if \"assignee\" in attributes and attributes[ \"assignee\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"assignee\" ], dict )\n             self.__assignee = NamedUser.NamedUser( self.__requester, attributes[ \"assignee\" ], completion = LazyCompletion )\n-        if \"body\" in attributes and attributes[ \"body\" ] is not None:\n+        if \"body\" in attributes and attributes[ \"body\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"body\" ], ( str, unicode ) )\n             self.__body = attributes[ \"body\" ]\n-        if \"closed_at\" in attributes and attributes[ \"closed_at\" ] is not None:\n+        if \"closed_at\" in attributes and attributes[ \"closed_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"closed_at\" ], ( str, unicode ) )\n             self.__closed_at = attributes[ \"closed_at\" ]\n-        if \"closed_by\" in attributes and attributes[ \"closed_by\" ] is not None:\n+        if \"closed_by\" in attributes and attributes[ \"closed_by\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"closed_by\" ], dict )\n             self.__closed_by = NamedUser.NamedUser( self.__requester, attributes[ \"closed_by\" ], completion = LazyCompletion )\n-        if \"comments\" in attributes and attributes[ \"comments\" ] is not None:\n+        if \"comments\" in attributes and attributes[ \"comments\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"comments\" ], int )\n             self.__comments = attributes[ \"comments\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"created_at\" ], ( str, unicode ) )\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None:\n+        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"html_url\" ], ( str, unicode ) )\n             self.__html_url = attributes[ \"html_url\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"id\" ], int )\n             self.__id = attributes[ \"id\" ]\n-        if \"labels\" in attributes and attributes[ \"labels\" ] is not None:\n+        if \"labels\" in attributes and attributes[ \"labels\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"labels\" ], list ) and ( len( attributes[ \"labels\" ] ) == 0 or isinstance( attributes[ \"labels\" ][ 0 ], dict ) )\n             self.__labels = [\n                 Label.Label( self.__requester, element, completion = LazyCompletion )\n                 for element in attributes[ \"labels\" ]\n             ]\n-        if \"milestone\" in attributes and attributes[ \"milestone\" ] is not None:\n+        if \"milestone\" in attributes and attributes[ \"milestone\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"milestone\" ], dict )\n             self.__milestone = Milestone.Milestone( self.__requester, attributes[ \"milestone\" ], completion = LazyCompletion )\n-        if \"number\" in attributes and attributes[ \"number\" ] is not None:\n+        if \"number\" in attributes and attributes[ \"number\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"number\" ], int )\n             self.__number = attributes[ \"number\" ]\n-        if \"pull_request\" in attributes and attributes[ \"pull_request\" ] is not None:\n+        if \"pull_request\" in attributes and attributes[ \"pull_request\" ] is not None: # pragma no branch\n             self.__pull_request = attributes[ \"pull_request\" ]\n-        if \"repository\" in attributes and attributes[ \"repository\" ] is not None:\n+        if \"repository\" in attributes and attributes[ \"repository\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"repository\" ], dict )\n             self.__repository = Repository.Repository( self.__requester, attributes[ \"repository\" ], completion = LazyCompletion )\n-        if \"state\" in attributes and attributes[ \"state\" ] is not None:\n+        if \"state\" in attributes and attributes[ \"state\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"state\" ], ( str, unicode ) )\n             self.__state = attributes[ \"state\" ]\n-        if \"title\" in attributes and attributes[ \"title\" ] is not None:\n+        if \"title\" in attributes and attributes[ \"title\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"title\" ], ( str, unicode ) )\n             self.__title = attributes[ \"title\" ]\n-        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None:\n+        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"updated_at\" ], ( str, unicode ) )\n             self.__updated_at = attributes[ \"updated_at\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]\n-        if \"user\" in attributes and attributes[ \"user\" ] is not None:\n+        if \"user\" in attributes and attributes[ \"user\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"user\" ], dict )\n             self.__user = NamedUser.NamedUser( self.__requester, attributes[ \"user\" ], completion = LazyCompletion )","status":"modified","deletions":21,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Issue.py","changes":53,"additions":32,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Issue.py","filename":"src/github/Issue.py"},{"patch":"@@ -68,16 +68,16 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"body\", \"created_at\", \"id\", \"updated_at\", \"url\", \"user\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"body\" in attributes and attributes[ \"body\" ] is not None:\n+        if \"body\" in attributes and attributes[ \"body\" ] is not None: # pragma no branch\n             self.__body = attributes[ \"body\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             self.__id = attributes[ \"id\" ]\n-        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None:\n+        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None: # pragma no branch\n             self.__updated_at = attributes[ \"updated_at\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             self.__url = attributes[ \"url\" ]\n-        if \"user\" in attributes and attributes[ \"user\" ] is not None:\n+        if \"user\" in attributes and attributes[ \"user\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"user\" ], dict )\n             self.__user = NamedUser.NamedUser( self.__requester, attributes[ \"user\" ], completion = LazyCompletion )","status":"modified","deletions":6,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/IssueComment.py","changes":12,"additions":6,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/IssueComment.py","filename":"src/github/IssueComment.py"},{"patch":"@@ -78,24 +78,24 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"actor\", \"commit_id\", \"created_at\", \"event\", \"id\", \"issue\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"actor\" in attributes and attributes[ \"actor\" ] is not None:\n+        if \"actor\" in attributes and attributes[ \"actor\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"actor\" ], dict )\n             self.__actor = NamedUser.NamedUser( self.__requester, attributes[ \"actor\" ], completion = LazyCompletion )\n-        if \"commit_id\" in attributes and attributes[ \"commit_id\" ] is not None:\n+        if \"commit_id\" in attributes and attributes[ \"commit_id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"commit_id\" ], ( str, unicode ) )\n             self.__commit_id = attributes[ \"commit_id\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"created_at\" ], ( str, unicode ) )\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"event\" in attributes and attributes[ \"event\" ] is not None:\n+        if \"event\" in attributes and attributes[ \"event\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"event\" ], ( str, unicode ) )\n             self.__event = attributes[ \"event\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"id\" ], int )\n             self.__id = attributes[ \"id\" ]\n-        if \"issue\" in attributes and attributes[ \"issue\" ] is not None:\n+        if \"issue\" in attributes and attributes[ \"issue\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"issue\" ], dict )\n             self.__issue = Issue.Issue( self.__requester, attributes[ \"issue\" ], completion = LazyCompletion )\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":7,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/IssueEvent.py","changes":14,"additions":7,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/IssueEvent.py","filename":"src/github/IssueEvent.py"},{"patch":"@@ -1,6 +1,8 @@\n # WARNING: this file is generated automaticaly.\n # Do not modify it manually, your work would be lost.\n \n+import urllib\n+\n import PaginatedList\n from GithubObject import *\n \n@@ -43,6 +45,11 @@ def edit( self, name, color ):\n         )\n         self.__useAttributes( data )\n \n+    # @toto Remove '_identity' from the normalized json description\n+    @property\n+    def _identity( self ):\n+        return urllib.quote( self.name )\n+\n     def __initAttributes( self ):\n         self.__color = None\n         self.__name = None\n@@ -53,9 +60,9 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"color\", \"name\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"color\" in attributes and attributes[ \"color\" ] is not None:\n+        if \"color\" in attributes and attributes[ \"color\" ] is not None: # pragma no branch\n             self.__color = attributes[ \"color\" ]\n-        if \"name\" in attributes and attributes[ \"name\" ] is not None:\n+        if \"name\" in attributes and attributes[ \"name\" ] is not None: # pragma no branch\n             self.__name = attributes[ \"name\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":3,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Label.py","changes":13,"additions":10,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Label.py","filename":"src/github/Label.py"},{"patch":"@@ -114,36 +114,36 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"closed_issues\", \"created_at\", \"creator\", \"description\", \"due_on\", \"id\", \"number\", \"open_issues\", \"state\", \"title\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"closed_issues\" in attributes and attributes[ \"closed_issues\" ] is not None:\n+        if \"closed_issues\" in attributes and attributes[ \"closed_issues\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"closed_issues\" ], int )\n             self.__closed_issues = attributes[ \"closed_issues\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"created_at\" ], ( str, unicode ) )\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"creator\" in attributes and attributes[ \"creator\" ] is not None:\n+        if \"creator\" in attributes and attributes[ \"creator\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"creator\" ], dict )\n             self.__creator = NamedUser.NamedUser( self.__requester, attributes[ \"creator\" ], completion = LazyCompletion )\n-        if \"description\" in attributes and attributes[ \"description\" ] is not None:\n+        if \"description\" in attributes and attributes[ \"description\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"description\" ], ( str, unicode ) )\n             self.__description = attributes[ \"description\" ]\n-        if \"due_on\" in attributes and attributes[ \"due_on\" ] is not None:\n+        if \"due_on\" in attributes and attributes[ \"due_on\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"due_on\" ], ( str, unicode ) )\n             self.__due_on = attributes[ \"due_on\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"id\" ], int )\n             self.__id = attributes[ \"id\" ]\n-        if \"number\" in attributes and attributes[ \"number\" ] is not None:\n+        if \"number\" in attributes and attributes[ \"number\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"number\" ], int )\n             self.__number = attributes[ \"number\" ]\n-        if \"open_issues\" in attributes and attributes[ \"open_issues\" ] is not None:\n+        if \"open_issues\" in attributes and attributes[ \"open_issues\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"open_issues\" ], int )\n             self.__open_issues = attributes[ \"open_issues\" ]\n-        if \"state\" in attributes and attributes[ \"state\" ] is not None:\n+        if \"state\" in attributes and attributes[ \"state\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"state\" ], ( str, unicode ) )\n             self.__state = attributes[ \"state\" ]\n-        if \"title\" in attributes and attributes[ \"title\" ] is not None:\n+        if \"title\" in attributes and attributes[ \"title\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"title\" ], ( str, unicode ) )\n             self.__title = attributes[ \"title\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":11,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Milestone.py","changes":22,"additions":11,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Milestone.py","filename":"src/github/Milestone.py"},{"patch":"@@ -365,81 +365,81 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"avatar_url\", \"bio\", \"blog\", \"collaborators\", \"company\", \"contributions\", \"created_at\", \"disk_usage\", \"email\", \"followers\", \"following\", \"gravatar_id\", \"hireable\", \"html_url\", \"id\", \"location\", \"login\", \"name\", \"owned_private_repos\", \"plan\", \"private_gists\", \"public_gists\", \"public_repos\", \"total_private_repos\", \"type\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"avatar_url\" in attributes and attributes[ \"avatar_url\" ] is not None:\n+        if \"avatar_url\" in attributes and attributes[ \"avatar_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"avatar_url\" ], ( str, unicode ) )\n             self.__avatar_url = attributes[ \"avatar_url\" ]\n-        if \"bio\" in attributes and attributes[ \"bio\" ] is not None:\n+        if \"bio\" in attributes and attributes[ \"bio\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"bio\" ], ( str, unicode ) )\n             self.__bio = attributes[ \"bio\" ]\n-        if \"blog\" in attributes and attributes[ \"blog\" ] is not None:\n+        if \"blog\" in attributes and attributes[ \"blog\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"blog\" ], ( str, unicode ) )\n             self.__blog = attributes[ \"blog\" ]\n-        if \"collaborators\" in attributes and attributes[ \"collaborators\" ] is not None:\n+        if \"collaborators\" in attributes and attributes[ \"collaborators\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"collaborators\" ], int )\n             self.__collaborators = attributes[ \"collaborators\" ]\n-        if \"company\" in attributes and attributes[ \"company\" ] is not None:\n+        if \"company\" in attributes and attributes[ \"company\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"company\" ], ( str, unicode ) )\n             self.__company = attributes[ \"company\" ]\n-        if \"contributions\" in attributes and attributes[ \"contributions\" ] is not None:\n+        if \"contributions\" in attributes and attributes[ \"contributions\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"contributions\" ], int )\n             self.__contributions = attributes[ \"contributions\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"created_at\" ], ( str, unicode ) )\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"disk_usage\" in attributes and attributes[ \"disk_usage\" ] is not None:\n+        if \"disk_usage\" in attributes and attributes[ \"disk_usage\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"disk_usage\" ], int )\n             self.__disk_usage = attributes[ \"disk_usage\" ]\n-        if \"email\" in attributes and attributes[ \"email\" ] is not None:\n+        if \"email\" in attributes and attributes[ \"email\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"email\" ], ( str, unicode ) )\n             self.__email = attributes[ \"email\" ]\n-        if \"followers\" in attributes and attributes[ \"followers\" ] is not None:\n+        if \"followers\" in attributes and attributes[ \"followers\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"followers\" ], int )\n             self.__followers = attributes[ \"followers\" ]\n-        if \"following\" in attributes and attributes[ \"following\" ] is not None:\n+        if \"following\" in attributes and attributes[ \"following\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"following\" ], int )\n             self.__following = attributes[ \"following\" ]\n-        if \"gravatar_id\" in attributes and attributes[ \"gravatar_id\" ] is not None:\n+        if \"gravatar_id\" in attributes and attributes[ \"gravatar_id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"gravatar_id\" ], ( str, unicode ) )\n             self.__gravatar_id = attributes[ \"gravatar_id\" ]\n-        if \"hireable\" in attributes and attributes[ \"hireable\" ] is not None:\n+        if \"hireable\" in attributes and attributes[ \"hireable\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"hireable\" ], bool )\n             self.__hireable = attributes[ \"hireable\" ]\n-        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None:\n+        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"html_url\" ], ( str, unicode ) )\n             self.__html_url = attributes[ \"html_url\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"id\" ], int )\n             self.__id = attributes[ \"id\" ]\n-        if \"location\" in attributes and attributes[ \"location\" ] is not None:\n+        if \"location\" in attributes and attributes[ \"location\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"location\" ], ( str, unicode ) )\n             self.__location = attributes[ \"location\" ]\n-        if \"login\" in attributes and attributes[ \"login\" ] is not None:\n+        if \"login\" in attributes and attributes[ \"login\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"login\" ], ( str, unicode ) )\n             self.__login = attributes[ \"login\" ]\n-        if \"name\" in attributes and attributes[ \"name\" ] is not None:\n+        if \"name\" in attributes and attributes[ \"name\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"name\" ], ( str, unicode ) )\n             self.__name = attributes[ \"name\" ]\n-        if \"owned_private_repos\" in attributes and attributes[ \"owned_private_repos\" ] is not None:\n+        if \"owned_private_repos\" in attributes and attributes[ \"owned_private_repos\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"owned_private_repos\" ], int )\n             self.__owned_private_repos = attributes[ \"owned_private_repos\" ]\n-        if \"plan\" in attributes and attributes[ \"plan\" ] is not None:\n+        if \"plan\" in attributes and attributes[ \"plan\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"plan\" ], dict )\n             self.__plan = Plan.Plan( self.__requester, attributes[ \"plan\" ], completion = LazyCompletion )\n-        if \"private_gists\" in attributes and attributes[ \"private_gists\" ] is not None:\n+        if \"private_gists\" in attributes and attributes[ \"private_gists\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"private_gists\" ], int )\n             self.__private_gists = attributes[ \"private_gists\" ]\n-        if \"public_gists\" in attributes and attributes[ \"public_gists\" ] is not None:\n+        if \"public_gists\" in attributes and attributes[ \"public_gists\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"public_gists\" ], int )\n             self.__public_gists = attributes[ \"public_gists\" ]\n-        if \"public_repos\" in attributes and attributes[ \"public_repos\" ] is not None:\n+        if \"public_repos\" in attributes and attributes[ \"public_repos\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"public_repos\" ], int )\n             self.__public_repos = attributes[ \"public_repos\" ]\n-        if \"total_private_repos\" in attributes and attributes[ \"total_private_repos\" ] is not None:\n+        if \"total_private_repos\" in attributes and attributes[ \"total_private_repos\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"total_private_repos\" ], int )\n             self.__total_private_repos = attributes[ \"total_private_repos\" ]\n-        if \"type\" in attributes and attributes[ \"type\" ] is not None:\n+        if \"type\" in attributes and attributes[ \"type\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"type\" ], ( str, unicode ) )\n             self.__type = attributes[ \"type\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":26,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/NamedUser.py","changes":52,"additions":26,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/NamedUser.py","filename":"src/github/NamedUser.py"},{"patch":"@@ -390,75 +390,75 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"avatar_url\", \"billing_email\", \"blog\", \"collaborators\", \"company\", \"created_at\", \"disk_usage\", \"email\", \"followers\", \"following\", \"gravatar_id\", \"html_url\", \"id\", \"location\", \"login\", \"name\", \"owned_private_repos\", \"plan\", \"private_gists\", \"public_gists\", \"public_repos\", \"total_private_repos\", \"type\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"avatar_url\" in attributes and attributes[ \"avatar_url\" ] is not None:\n+        if \"avatar_url\" in attributes and attributes[ \"avatar_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"avatar_url\" ], ( str, unicode ) )\n             self.__avatar_url = attributes[ \"avatar_url\" ]\n-        if \"billing_email\" in attributes and attributes[ \"billing_email\" ] is not None:\n+        if \"billing_email\" in attributes and attributes[ \"billing_email\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"billing_email\" ], ( str, unicode ) )\n             self.__billing_email = attributes[ \"billing_email\" ]\n-        if \"blog\" in attributes and attributes[ \"blog\" ] is not None:\n+        if \"blog\" in attributes and attributes[ \"blog\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"blog\" ], ( str, unicode ) )\n             self.__blog = attributes[ \"blog\" ]\n-        if \"collaborators\" in attributes and attributes[ \"collaborators\" ] is not None:\n+        if \"collaborators\" in attributes and attributes[ \"collaborators\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"collaborators\" ], int )\n             self.__collaborators = attributes[ \"collaborators\" ]\n-        if \"company\" in attributes and attributes[ \"company\" ] is not None:\n+        if \"company\" in attributes and attributes[ \"company\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"company\" ], ( str, unicode ) )\n             self.__company = attributes[ \"company\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"created_at\" ], ( str, unicode ) )\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"disk_usage\" in attributes and attributes[ \"disk_usage\" ] is not None:\n+        if \"disk_usage\" in attributes and attributes[ \"disk_usage\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"disk_usage\" ], int )\n             self.__disk_usage = attributes[ \"disk_usage\" ]\n-        if \"email\" in attributes and attributes[ \"email\" ] is not None:\n+        if \"email\" in attributes and attributes[ \"email\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"email\" ], ( str, unicode ) )\n             self.__email = attributes[ \"email\" ]\n-        if \"followers\" in attributes and attributes[ \"followers\" ] is not None:\n+        if \"followers\" in attributes and attributes[ \"followers\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"followers\" ], int )\n             self.__followers = attributes[ \"followers\" ]\n-        if \"following\" in attributes and attributes[ \"following\" ] is not None:\n+        if \"following\" in attributes and attributes[ \"following\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"following\" ], int )\n             self.__following = attributes[ \"following\" ]\n-        if \"gravatar_id\" in attributes and attributes[ \"gravatar_id\" ] is not None:\n+        if \"gravatar_id\" in attributes and attributes[ \"gravatar_id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"gravatar_id\" ], ( str, unicode ) )\n             self.__gravatar_id = attributes[ \"gravatar_id\" ]\n-        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None:\n+        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"html_url\" ], ( str, unicode ) )\n             self.__html_url = attributes[ \"html_url\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"id\" ], int )\n             self.__id = attributes[ \"id\" ]\n-        if \"location\" in attributes and attributes[ \"location\" ] is not None:\n+        if \"location\" in attributes and attributes[ \"location\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"location\" ], ( str, unicode ) )\n             self.__location = attributes[ \"location\" ]\n-        if \"login\" in attributes and attributes[ \"login\" ] is not None:\n+        if \"login\" in attributes and attributes[ \"login\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"login\" ], ( str, unicode ) )\n             self.__login = attributes[ \"login\" ]\n-        if \"name\" in attributes and attributes[ \"name\" ] is not None:\n+        if \"name\" in attributes and attributes[ \"name\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"name\" ], ( str, unicode ) )\n             self.__name = attributes[ \"name\" ]\n-        if \"owned_private_repos\" in attributes and attributes[ \"owned_private_repos\" ] is not None:\n+        if \"owned_private_repos\" in attributes and attributes[ \"owned_private_repos\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"owned_private_repos\" ], int )\n             self.__owned_private_repos = attributes[ \"owned_private_repos\" ]\n-        if \"plan\" in attributes and attributes[ \"plan\" ] is not None:\n+        if \"plan\" in attributes and attributes[ \"plan\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"plan\" ], dict )\n             self.__plan = Plan.Plan( self.__requester, attributes[ \"plan\" ], completion = LazyCompletion )\n-        if \"private_gists\" in attributes and attributes[ \"private_gists\" ] is not None:\n+        if \"private_gists\" in attributes and attributes[ \"private_gists\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"private_gists\" ], int )\n             self.__private_gists = attributes[ \"private_gists\" ]\n-        if \"public_gists\" in attributes and attributes[ \"public_gists\" ] is not None:\n+        if \"public_gists\" in attributes and attributes[ \"public_gists\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"public_gists\" ], int )\n             self.__public_gists = attributes[ \"public_gists\" ]\n-        if \"public_repos\" in attributes and attributes[ \"public_repos\" ] is not None:\n+        if \"public_repos\" in attributes and attributes[ \"public_repos\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"public_repos\" ], int )\n             self.__public_repos = attributes[ \"public_repos\" ]\n-        if \"total_private_repos\" in attributes and attributes[ \"total_private_repos\" ] is not None:\n+        if \"total_private_repos\" in attributes and attributes[ \"total_private_repos\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"total_private_repos\" ], int )\n             self.__total_private_repos = attributes[ \"total_private_repos\" ]\n-        if \"type\" in attributes and attributes[ \"type\" ] is not None:\n+        if \"type\" in attributes and attributes[ \"type\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"type\" ], ( str, unicode ) )\n             self.__type = attributes[ \"type\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":24,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Organization.py","changes":48,"additions":24,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Organization.py","filename":"src/github/Organization.py"},{"patch":"@@ -32,12 +32,12 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"admin\", \"pull\", \"push\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"admin\" in attributes and attributes[ \"admin\" ] is not None:\n+        if \"admin\" in attributes and attributes[ \"admin\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"admin\" ], bool )\n             self.__admin = attributes[ \"admin\" ]\n-        if \"pull\" in attributes and attributes[ \"pull\" ] is not None:\n+        if \"pull\" in attributes and attributes[ \"pull\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"pull\" ], bool )\n             self.__pull = attributes[ \"pull\" ]\n-        if \"push\" in attributes and attributes[ \"push\" ] is not None:\n+        if \"push\" in attributes and attributes[ \"push\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"push\" ], bool )\n             self.__push = attributes[ \"push\" ]","status":"modified","deletions":3,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Permissions.py","changes":6,"additions":3,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Permissions.py","filename":"src/github/Permissions.py"},{"patch":"@@ -37,15 +37,15 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"collaborators\", \"name\", \"private_repos\", \"space\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"collaborators\" in attributes and attributes[ \"collaborators\" ] is not None:\n+        if \"collaborators\" in attributes and attributes[ \"collaborators\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"collaborators\" ], int )\n             self.__collaborators = attributes[ \"collaborators\" ]\n-        if \"name\" in attributes and attributes[ \"name\" ] is not None:\n+        if \"name\" in attributes and attributes[ \"name\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"name\" ], ( str, unicode ) )\n             self.__name = attributes[ \"name\" ]\n-        if \"private_repos\" in attributes and attributes[ \"private_repos\" ] is not None:\n+        if \"private_repos\" in attributes and attributes[ \"private_repos\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"private_repos\" ], int )\n             self.__private_repos = attributes[ \"private_repos\" ]\n-        if \"space\" in attributes and attributes[ \"space\" ] is not None:\n+        if \"space\" in attributes and attributes[ \"space\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"space\" ], int )\n             self.__space = attributes[ \"space\" ]","status":"modified","deletions":4,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Plan.py","changes":8,"additions":4,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Plan.py","filename":"src/github/Plan.py"},{"patch":"@@ -279,56 +279,56 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"additions\", \"base\", \"body\", \"changed_files\", \"closed_at\", \"comments\", \"commits\", \"created_at\", \"deletions\", \"diff_url\", \"head\", \"html_url\", \"id\", \"issue_url\", \"mergeable\", \"merged\", \"merged_at\", \"merged_by\", \"number\", \"patch_url\", \"review_comments\", \"state\", \"title\", \"updated_at\", \"url\", \"user\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"additions\" in attributes and attributes[ \"additions\" ] is not None:\n+        if \"additions\" in attributes and attributes[ \"additions\" ] is not None: # pragma no branch\n             self.__additions = attributes[ \"additions\" ]\n-        if \"base\" in attributes and attributes[ \"base\" ] is not None:\n+        if \"base\" in attributes and attributes[ \"base\" ] is not None: # pragma no branch\n             self.__base = attributes[ \"base\" ]\n-        if \"body\" in attributes and attributes[ \"body\" ] is not None:\n+        if \"body\" in attributes and attributes[ \"body\" ] is not None: # pragma no branch\n             self.__body = attributes[ \"body\" ]\n-        if \"changed_files\" in attributes and attributes[ \"changed_files\" ] is not None:\n+        if \"changed_files\" in attributes and attributes[ \"changed_files\" ] is not None: # pragma no branch\n             self.__changed_files = attributes[ \"changed_files\" ]\n-        if \"closed_at\" in attributes and attributes[ \"closed_at\" ] is not None:\n+        if \"closed_at\" in attributes and attributes[ \"closed_at\" ] is not None: # pragma no branch\n             self.__closed_at = attributes[ \"closed_at\" ]\n-        if \"comments\" in attributes and attributes[ \"comments\" ] is not None:\n+        if \"comments\" in attributes and attributes[ \"comments\" ] is not None: # pragma no branch\n             self.__comments = attributes[ \"comments\" ]\n-        if \"commits\" in attributes and attributes[ \"commits\" ] is not None:\n+        if \"commits\" in attributes and attributes[ \"commits\" ] is not None: # pragma no branch\n             self.__commits = attributes[ \"commits\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"deletions\" in attributes and attributes[ \"deletions\" ] is not None:\n+        if \"deletions\" in attributes and attributes[ \"deletions\" ] is not None: # pragma no branch\n             self.__deletions = attributes[ \"deletions\" ]\n-        if \"diff_url\" in attributes and attributes[ \"diff_url\" ] is not None:\n+        if \"diff_url\" in attributes and attributes[ \"diff_url\" ] is not None: # pragma no branch\n             self.__diff_url = attributes[ \"diff_url\" ]\n-        if \"head\" in attributes and attributes[ \"head\" ] is not None:\n+        if \"head\" in attributes and attributes[ \"head\" ] is not None: # pragma no branch\n             self.__head = attributes[ \"head\" ]\n-        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None:\n+        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None: # pragma no branch\n             self.__html_url = attributes[ \"html_url\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             self.__id = attributes[ \"id\" ]\n-        if \"issue_url\" in attributes and attributes[ \"issue_url\" ] is not None:\n+        if \"issue_url\" in attributes and attributes[ \"issue_url\" ] is not None: # pragma no branch\n             self.__issue_url = attributes[ \"issue_url\" ]\n-        if \"mergeable\" in attributes and attributes[ \"mergeable\" ] is not None:\n+        if \"mergeable\" in attributes and attributes[ \"mergeable\" ] is not None: # pragma no branch\n             self.__mergeable = attributes[ \"mergeable\" ]\n-        if \"merged\" in attributes and attributes[ \"merged\" ] is not None:\n+        if \"merged\" in attributes and attributes[ \"merged\" ] is not None: # pragma no branch\n             self.__merged = attributes[ \"merged\" ]\n-        if \"merged_at\" in attributes and attributes[ \"merged_at\" ] is not None:\n+        if \"merged_at\" in attributes and attributes[ \"merged_at\" ] is not None: # pragma no branch\n             self.__merged_at = attributes[ \"merged_at\" ]\n-        if \"merged_by\" in attributes and attributes[ \"merged_by\" ] is not None:\n+        if \"merged_by\" in attributes and attributes[ \"merged_by\" ] is not None: # pragma no branch\n             self.__merged_by = attributes[ \"merged_by\" ]\n-        if \"number\" in attributes and attributes[ \"number\" ] is not None:\n+        if \"number\" in attributes and attributes[ \"number\" ] is not None: # pragma no branch\n             self.__number = attributes[ \"number\" ]\n-        if \"patch_url\" in attributes and attributes[ \"patch_url\" ] is not None:\n+        if \"patch_url\" in attributes and attributes[ \"patch_url\" ] is not None: # pragma no branch\n             self.__patch_url = attributes[ \"patch_url\" ]\n-        if \"review_comments\" in attributes and attributes[ \"review_comments\" ] is not None:\n+        if \"review_comments\" in attributes and attributes[ \"review_comments\" ] is not None: # pragma no branch\n             self.__review_comments = attributes[ \"review_comments\" ]\n-        if \"state\" in attributes and attributes[ \"state\" ] is not None:\n+        if \"state\" in attributes and attributes[ \"state\" ] is not None: # pragma no branch\n             self.__state = attributes[ \"state\" ]\n-        if \"title\" in attributes and attributes[ \"title\" ] is not None:\n+        if \"title\" in attributes and attributes[ \"title\" ] is not None: # pragma no branch\n             self.__title = attributes[ \"title\" ]\n-        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None:\n+        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None: # pragma no branch\n             self.__updated_at = attributes[ \"updated_at\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             self.__url = attributes[ \"url\" ]\n-        if \"user\" in attributes and attributes[ \"user\" ] is not None:\n+        if \"user\" in attributes and attributes[ \"user\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"user\" ], dict )\n             self.__user = NamedUser.NamedUser( self.__requester, attributes[ \"user\" ], completion = LazyCompletion )","status":"modified","deletions":26,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/PullRequest.py","changes":52,"additions":26,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/PullRequest.py","filename":"src/github/PullRequest.py"},{"patch":"@@ -121,26 +121,26 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"body\", \"commit_id\", \"created_at\", \"html_url\", \"id\", \"line\", \"path\", \"position\", \"updated_at\", \"url\", \"user\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"body\" in attributes and attributes[ \"body\" ] is not None:\n+        if \"body\" in attributes and attributes[ \"body\" ] is not None: # pragma no branch\n             self.__body = attributes[ \"body\" ]\n-        if \"commit_id\" in attributes and attributes[ \"commit_id\" ] is not None:\n+        if \"commit_id\" in attributes and attributes[ \"commit_id\" ] is not None: # pragma no branch\n             self.__commit_id = attributes[ \"commit_id\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None:\n+        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None: # pragma no branch\n             self.__html_url = attributes[ \"html_url\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             self.__id = attributes[ \"id\" ]\n-        if \"line\" in attributes and attributes[ \"line\" ] is not None:\n+        if \"line\" in attributes and attributes[ \"line\" ] is not None: # pragma no branch\n             self.__line = attributes[ \"line\" ]\n-        if \"path\" in attributes and attributes[ \"path\" ] is not None:\n+        if \"path\" in attributes and attributes[ \"path\" ] is not None: # pragma no branch\n             self.__path = attributes[ \"path\" ]\n-        if \"position\" in attributes and attributes[ \"position\" ] is not None:\n+        if \"position\" in attributes and attributes[ \"position\" ] is not None: # pragma no branch\n             self.__position = attributes[ \"position\" ]\n-        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None:\n+        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None: # pragma no branch\n             self.__updated_at = attributes[ \"updated_at\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             self.__url = attributes[ \"url\" ]\n-        if \"user\" in attributes and attributes[ \"user\" ] is not None:\n+        if \"user\" in attributes and attributes[ \"user\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"user\" ], dict )\n             self.__user = NamedUser.NamedUser( self.__requester, attributes[ \"user\" ], completion = LazyCompletion )","status":"modified","deletions":11,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/PullRequestComment.py","changes":22,"additions":11,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/PullRequestComment.py","filename":"src/github/PullRequestComment.py"},{"patch":"@@ -62,21 +62,21 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"additions\", \"blob_url\", \"changes\", \"deletions\", \"filename\", \"patch\", \"raw_url\", \"sha\", \"status\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"additions\" in attributes and attributes[ \"additions\" ] is not None:\n+        if \"additions\" in attributes and attributes[ \"additions\" ] is not None: # pragma no branch\n             self.__additions = attributes[ \"additions\" ]\n-        if \"blob_url\" in attributes and attributes[ \"blob_url\" ] is not None:\n+        if \"blob_url\" in attributes and attributes[ \"blob_url\" ] is not None: # pragma no branch\n             self.__blob_url = attributes[ \"blob_url\" ]\n-        if \"changes\" in attributes and attributes[ \"changes\" ] is not None:\n+        if \"changes\" in attributes and attributes[ \"changes\" ] is not None: # pragma no branch\n             self.__changes = attributes[ \"changes\" ]\n-        if \"deletions\" in attributes and attributes[ \"deletions\" ] is not None:\n+        if \"deletions\" in attributes and attributes[ \"deletions\" ] is not None: # pragma no branch\n             self.__deletions = attributes[ \"deletions\" ]\n-        if \"filename\" in attributes and attributes[ \"filename\" ] is not None:\n+        if \"filename\" in attributes and attributes[ \"filename\" ] is not None: # pragma no branch\n             self.__filename = attributes[ \"filename\" ]\n-        if \"patch\" in attributes and attributes[ \"patch\" ] is not None:\n+        if \"patch\" in attributes and attributes[ \"patch\" ] is not None: # pragma no branch\n             self.__patch = attributes[ \"patch\" ]\n-        if \"raw_url\" in attributes and attributes[ \"raw_url\" ] is not None:\n+        if \"raw_url\" in attributes and attributes[ \"raw_url\" ] is not None: # pragma no branch\n             self.__raw_url = attributes[ \"raw_url\" ]\n-        if \"sha\" in attributes and attributes[ \"sha\" ] is not None:\n+        if \"sha\" in attributes and attributes[ \"sha\" ] is not None: # pragma no branch\n             self.__sha = attributes[ \"sha\" ]\n-        if \"status\" in attributes and attributes[ \"status\" ] is not None:\n+        if \"status\" in attributes and attributes[ \"status\" ] is not None: # pragma no branch\n             self.__status = attributes[ \"status\" ]","status":"modified","deletions":9,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/PullRequestFile.py","changes":18,"additions":9,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/PullRequestFile.py","filename":"src/github/PullRequestFile.py"},{"patch":"@@ -905,96 +905,96 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"clone_url\", \"created_at\", \"description\", \"fork\", \"forks\", \"full_name\", \"git_url\", \"has_downloads\", \"has_issues\", \"has_wiki\", \"homepage\", \"html_url\", \"id\", \"language\", \"master_branch\", \"mirror_url\", \"name\", \"open_issues\", \"organization\", \"owner\", \"parent\", \"permissions\", \"private\", \"pushed_at\", \"size\", \"source\", \"ssh_url\", \"svn_url\", \"updated_at\", \"url\", \"watchers\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"clone_url\" in attributes and attributes[ \"clone_url\" ] is not None:\n+        if \"clone_url\" in attributes and attributes[ \"clone_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"clone_url\" ], ( str, unicode ) )\n             self.__clone_url = attributes[ \"clone_url\" ]\n-        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None:\n+        if \"created_at\" in attributes and attributes[ \"created_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"created_at\" ], ( str, unicode ) )\n             self.__created_at = attributes[ \"created_at\" ]\n-        if \"description\" in attributes and attributes[ \"description\" ] is not None:\n+        if \"description\" in attributes and attributes[ \"description\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"description\" ], ( str, unicode ) )\n             self.__description = attributes[ \"description\" ]\n-        if \"fork\" in attributes and attributes[ \"fork\" ] is not None:\n+        if \"fork\" in attributes and attributes[ \"fork\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"fork\" ], bool )\n             self.__fork = attributes[ \"fork\" ]\n-        if \"forks\" in attributes and attributes[ \"forks\" ] is not None:\n+        if \"forks\" in attributes and attributes[ \"forks\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"forks\" ], int )\n             self.__forks = attributes[ \"forks\" ]\n-        if \"full_name\" in attributes and attributes[ \"full_name\" ] is not None:\n+        if \"full_name\" in attributes and attributes[ \"full_name\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"full_name\" ], ( str, unicode ) )\n             self.__full_name = attributes[ \"full_name\" ]\n-        if \"git_url\" in attributes and attributes[ \"git_url\" ] is not None:\n+        if \"git_url\" in attributes and attributes[ \"git_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"git_url\" ], ( str, unicode ) )\n             self.__git_url = attributes[ \"git_url\" ]\n-        if \"has_downloads\" in attributes and attributes[ \"has_downloads\" ] is not None:\n+        if \"has_downloads\" in attributes and attributes[ \"has_downloads\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"has_downloads\" ], bool )\n             self.__has_downloads = attributes[ \"has_downloads\" ]\n-        if \"has_issues\" in attributes and attributes[ \"has_issues\" ] is not None:\n+        if \"has_issues\" in attributes and attributes[ \"has_issues\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"has_issues\" ], bool )\n             self.__has_issues = attributes[ \"has_issues\" ]\n-        if \"has_wiki\" in attributes and attributes[ \"has_wiki\" ] is not None:\n+        if \"has_wiki\" in attributes and attributes[ \"has_wiki\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"has_wiki\" ], bool )\n             self.__has_wiki = attributes[ \"has_wiki\" ]\n-        if \"homepage\" in attributes and attributes[ \"homepage\" ] is not None:\n+        if \"homepage\" in attributes and attributes[ \"homepage\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"homepage\" ], ( str, unicode ) )\n             self.__homepage = attributes[ \"homepage\" ]\n-        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None:\n+        if \"html_url\" in attributes and attributes[ \"html_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"html_url\" ], ( str, unicode ) )\n             self.__html_url = attributes[ \"html_url\" ]\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"id\" ], int )\n             self.__id = attributes[ \"id\" ]\n-        if \"language\" in attributes and attributes[ \"language\" ] is not None:\n+        if \"language\" in attributes and attributes[ \"language\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"language\" ], ( str, unicode ) )\n             self.__language = attributes[ \"language\" ]\n-        if \"master_branch\" in attributes and attributes[ \"master_branch\" ] is not None:\n+        if \"master_branch\" in attributes and attributes[ \"master_branch\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"master_branch\" ], ( str, unicode ) )\n             self.__master_branch = attributes[ \"master_branch\" ]\n-        if \"mirror_url\" in attributes and attributes[ \"mirror_url\" ] is not None:\n+        if \"mirror_url\" in attributes and attributes[ \"mirror_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"mirror_url\" ], ( str, unicode ) )\n             self.__mirror_url = attributes[ \"mirror_url\" ]\n-        if \"name\" in attributes and attributes[ \"name\" ] is not None:\n+        if \"name\" in attributes and attributes[ \"name\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"name\" ], ( str, unicode ) )\n             self.__name = attributes[ \"name\" ]\n-        if \"open_issues\" in attributes and attributes[ \"open_issues\" ] is not None:\n+        if \"open_issues\" in attributes and attributes[ \"open_issues\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"open_issues\" ], int )\n             self.__open_issues = attributes[ \"open_issues\" ]\n-        if \"organization\" in attributes and attributes[ \"organization\" ] is not None:\n+        if \"organization\" in attributes and attributes[ \"organization\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"organization\" ], dict )\n             self.__organization = Organization.Organization( self.__requester, attributes[ \"organization\" ], completion = LazyCompletion )\n-        if \"owner\" in attributes and attributes[ \"owner\" ] is not None:\n+        if \"owner\" in attributes and attributes[ \"owner\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"owner\" ], dict )\n             self.__owner = NamedUser.NamedUser( self.__requester, attributes[ \"owner\" ], completion = LazyCompletion )\n-        if \"parent\" in attributes and attributes[ \"parent\" ] is not None:\n+        if \"parent\" in attributes and attributes[ \"parent\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"parent\" ], dict )\n             self.__parent = Repository( self.__requester, attributes[ \"parent\" ], completion = LazyCompletion )\n-        if \"permissions\" in attributes and attributes[ \"permissions\" ] is not None:\n+        if \"permissions\" in attributes and attributes[ \"permissions\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"permissions\" ], dict )\n             self.__permissions = Permissions.Permissions( self.__requester, attributes[ \"permissions\" ], completion = LazyCompletion )\n-        if \"private\" in attributes and attributes[ \"private\" ] is not None:\n+        if \"private\" in attributes and attributes[ \"private\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"private\" ], bool )\n             self.__private = attributes[ \"private\" ]\n-        if \"pushed_at\" in attributes and attributes[ \"pushed_at\" ] is not None:\n+        if \"pushed_at\" in attributes and attributes[ \"pushed_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"pushed_at\" ], ( str, unicode ) )\n             self.__pushed_at = attributes[ \"pushed_at\" ]\n-        if \"size\" in attributes and attributes[ \"size\" ] is not None:\n+        if \"size\" in attributes and attributes[ \"size\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"size\" ], int )\n             self.__size = attributes[ \"size\" ]\n-        if \"source\" in attributes and attributes[ \"source\" ] is not None:\n+        if \"source\" in attributes and attributes[ \"source\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"source\" ], dict )\n             self.__source = Repository( self.__requester, attributes[ \"source\" ], completion = LazyCompletion )\n-        if \"ssh_url\" in attributes and attributes[ \"ssh_url\" ] is not None:\n+        if \"ssh_url\" in attributes and attributes[ \"ssh_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"ssh_url\" ], ( str, unicode ) )\n             self.__ssh_url = attributes[ \"ssh_url\" ]\n-        if \"svn_url\" in attributes and attributes[ \"svn_url\" ] is not None:\n+        if \"svn_url\" in attributes and attributes[ \"svn_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"svn_url\" ], ( str, unicode ) )\n             self.__svn_url = attributes[ \"svn_url\" ]\n-        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None:\n+        if \"updated_at\" in attributes and attributes[ \"updated_at\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"updated_at\" ], ( str, unicode ) )\n             self.__updated_at = attributes[ \"updated_at\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"url\" ], ( str, unicode ) )\n             self.__url = attributes[ \"url\" ]\n-        if \"watchers\" in attributes and attributes[ \"watchers\" ] is not None:\n+        if \"watchers\" in attributes and attributes[ \"watchers\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"watchers\" ], int )\n             self.__watchers = attributes[ \"watchers\" ]","status":"modified","deletions":31,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Repository.py","changes":62,"additions":31,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Repository.py","filename":"src/github/Repository.py"},{"patch":"@@ -87,14 +87,14 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"id\", \"key\", \"title\", \"url\", \"verified\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             self.__id = attributes[ \"id\" ]\n-        if \"key\" in attributes and attributes[ \"key\" ] is not None:\n+        if \"key\" in attributes and attributes[ \"key\" ] is not None: # pragma no branch\n             self.__key = attributes[ \"key\" ]\n-        if \"title\" in attributes and attributes[ \"title\" ] is not None:\n+        if \"title\" in attributes and attributes[ \"title\" ] is not None: # pragma no branch\n             self.__title = attributes[ \"title\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             self.__url = attributes[ \"url\" ]\n-        if \"verified\" in attributes and attributes[ \"verified\" ] is not None:\n+        if \"verified\" in attributes and attributes[ \"verified\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"verified\" ], bool )\n             self.__verified = attributes[ \"verified\" ]","status":"modified","deletions":5,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/RepositoryKey.py","changes":10,"additions":5,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/RepositoryKey.py","filename":"src/github/RepositoryKey.py"},{"patch":"@@ -38,15 +38,15 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"commit\", \"name\", \"tarball_url\", \"zipball_url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"commit\" in attributes and attributes[ \"commit\" ] is not None:\n+        if \"commit\" in attributes and attributes[ \"commit\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"commit\" ], dict )\n             self.__commit = Commit.Commit( self.__requester, attributes[ \"commit\" ], completion = LazyCompletion )\n-        if \"name\" in attributes and attributes[ \"name\" ] is not None:\n+        if \"name\" in attributes and attributes[ \"name\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"name\" ], ( str, unicode ) )\n             self.__name = attributes[ \"name\" ]\n-        if \"tarball_url\" in attributes and attributes[ \"tarball_url\" ] is not None:\n+        if \"tarball_url\" in attributes and attributes[ \"tarball_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"tarball_url\" ], ( str, unicode ) )\n             self.__tarball_url = attributes[ \"tarball_url\" ]\n-        if \"zipball_url\" in attributes and attributes[ \"zipball_url\" ] is not None:\n+        if \"zipball_url\" in attributes and attributes[ \"zipball_url\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"zipball_url\" ], ( str, unicode ) )\n             self.__zipball_url = attributes[ \"zipball_url\" ]","status":"modified","deletions":4,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Tag.py","changes":8,"additions":4,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Tag.py","filename":"src/github/Tag.py"},{"patch":"@@ -172,15 +172,15 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"id\", \"members_count\", \"name\", \"permission\", \"repos_count\", \"url\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             self.__id = attributes[ \"id\" ]\n-        if \"members_count\" in attributes and attributes[ \"members_count\" ] is not None:\n+        if \"members_count\" in attributes and attributes[ \"members_count\" ] is not None: # pragma no branch\n             self.__members_count = attributes[ \"members_count\" ]\n-        if \"name\" in attributes and attributes[ \"name\" ] is not None:\n+        if \"name\" in attributes and attributes[ \"name\" ] is not None: # pragma no branch\n             self.__name = attributes[ \"name\" ]\n-        if \"permission\" in attributes and attributes[ \"permission\" ] is not None:\n+        if \"permission\" in attributes and attributes[ \"permission\" ] is not None: # pragma no branch\n             self.__permission = attributes[ \"permission\" ]\n-        if \"repos_count\" in attributes and attributes[ \"repos_count\" ] is not None:\n+        if \"repos_count\" in attributes and attributes[ \"repos_count\" ] is not None: # pragma no branch\n             self.__repos_count = attributes[ \"repos_count\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             self.__url = attributes[ \"url\" ]","status":"modified","deletions":6,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Team.py","changes":12,"additions":6,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/Team.py","filename":"src/github/Team.py"},{"patch":"@@ -87,14 +87,14 @@ def __useAttributes( self, attributes ):\n         for attribute in attributes:\n             assert attribute in [ \"id\", \"key\", \"title\", \"url\", \"verified\", ], attribute\n         # @toto No need to check if attribute is in attributes when attribute is mandatory\n-        if \"id\" in attributes and attributes[ \"id\" ] is not None:\n+        if \"id\" in attributes and attributes[ \"id\" ] is not None: # pragma no branch\n             self.__id = attributes[ \"id\" ]\n-        if \"key\" in attributes and attributes[ \"key\" ] is not None:\n+        if \"key\" in attributes and attributes[ \"key\" ] is not None: # pragma no branch\n             self.__key = attributes[ \"key\" ]\n-        if \"title\" in attributes and attributes[ \"title\" ] is not None:\n+        if \"title\" in attributes and attributes[ \"title\" ] is not None: # pragma no branch\n             self.__title = attributes[ \"title\" ]\n-        if \"url\" in attributes and attributes[ \"url\" ] is not None:\n+        if \"url\" in attributes and attributes[ \"url\" ] is not None: # pragma no branch\n             self.__url = attributes[ \"url\" ]\n-        if \"verified\" in attributes and attributes[ \"verified\" ] is not None:\n+        if \"verified\" in attributes and attributes[ \"verified\" ] is not None: # pragma no branch\n             assert isinstance( attributes[ \"verified\" ], bool )\n             self.__verified = attributes[ \"verified\" ]","status":"modified","deletions":5,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/UserKey.py","changes":10,"additions":5,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/src/github/UserKey.py","filename":"src/github/UserKey.py"},{"patch":"@@ -3,7 +3,8 @@\n class Issue( Framework.TestCase ):\r\n     def setUp( self ):\r\n         Framework.TestCase.setUp( self )\r\n-        self.issue = self.g.get_user().get_repo( \"PyGithub\" ).get_issue( 28 )\r\n+        self.repo = self.g.get_user().get_repo( \"PyGithub\" )\r\n+        self.issue = self.repo.get_issue( 28 )\r\n \r\n     def testAttributes( self ):\r\n         self.assertEqual( self.issue.assignee.login, \"jacquev6\" )\r\n@@ -47,3 +48,26 @@ def testGetComments( self ):\n \r\n     def testGetEvents( self ):\r\n         self.assertListKeyEqual( self.issue.get_events(), lambda e: e.id, [ 15819975, 15820048 ] )\r\n+\r\n+    def testGetLabels( self ):\r\n+        self.assertListKeyEqual( self.issue.get_labels(), lambda l: l.name, [ \"Bug\", \"Project management\", \"Question\" ] )\r\n+\r\n+    def testAddAndRemoveLabels( self ):\r\n+        bug = self.repo.get_label( \"Bug\" )\r\n+        question = self.repo.get_label( \"Question\" )\r\n+        self.assertListKeyEqual( self.issue.get_labels(), lambda l: l.name, [ \"Bug\", \"Project management\", \"Question\" ] )\r\n+        self.issue.remove_from_labels( bug )\r\n+        self.assertListKeyEqual( self.issue.get_labels(), lambda l: l.name, [ \"Project management\", \"Question\" ] )\r\n+        self.issue.remove_from_labels( question )\r\n+        self.assertListKeyEqual( self.issue.get_labels(), lambda l: l.name, [ \"Project management\" ] )\r\n+        self.issue.add_to_labels( bug, question )\r\n+        self.assertListKeyEqual( self.issue.get_labels(), lambda l: l.name, [ \"Bug\", \"Project management\", \"Question\" ] )\r\n+\r\n+    def testDeleteAndSetLabels( self ):\r\n+        bug = self.repo.get_label( \"Bug\" )\r\n+        question = self.repo.get_label( \"Question\" )\r\n+        self.assertListKeyEqual( self.issue.get_labels(), lambda l: l.name, [ \"Bug\", \"Project management\", \"Question\" ] )\r\n+        self.issue.delete_labels()\r\n+        self.assertListKeyEqual( self.issue.get_labels(), lambda l: l.name, [] )\r\n+        self.issue.set_labels( bug, question )\r\n+        self.assertListKeyEqual( self.issue.get_labels(), lambda l: l.name, [ \"Bug\", \"Question\" ] )\r","status":"modified","deletions":1,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/test/Issue.py","changes":26,"additions":25,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/test/Issue.py","filename":"test/Issue.py"},{"patch":"@@ -3,13 +3,13 @@\n class IssueEvent( Framework.TestCase ):\r\n     def setUp( self ):\r\n         Framework.TestCase.setUp( self )\r\n-        self.event = self.g.get_user().get_repo( \"PyGithub\" ).get_issues_event( 15819975 )\r\n+        self.event = self.g.get_user().get_repo( \"PyGithub\" ).get_issues_event( 16348656 )\r\n \r\n     def testAttributes( self ):\r\n         self.assertEqual( self.event.actor.login, \"jacquev6\" )\r\n-        self.assertEqual( self.event.commit_id, None )\r\n-        self.assertEqual( self.event.created_at, \"2012-05-19T10:38:23Z\" )\r\n-        self.assertEqual( self.event.event, \"subscribed\" )\r\n-        self.assertEqual( self.event.id, 15819975 )\r\n-        self.assertEqual( self.event.issue.number, 28 )\r\n-        self.assertEqual( self.event.url, \"https://api.github.com/repos/jacquev6/PyGithub/issues/events/15819975\" )\r\n+        self.assertEqual( self.event.commit_id, \"ed866fc43833802ab553e5ff8581c81bb00dd433\" )\r\n+        self.assertEqual( self.event.created_at, \"2012-05-27T07:29:25Z\" )\r\n+        self.assertEqual( self.event.event, \"referenced\" )\r\n+        self.assertEqual( self.event.id, 16348656 )\r\n+        self.assertEqual( self.event.issue.number, 30 )\r\n+        self.assertEqual( self.event.url, \"https://api.github.com/repos/jacquev6/PyGithub/issues/events/16348656\" )\r","status":"modified","deletions":7,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/test/IssueEvent.py","changes":14,"additions":7,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/test/IssueEvent.py","filename":"test/IssueEvent.py"},{"patch":"@@ -0,0 +1,45 @@\n+GET /repos/jacquev6/PyGithub/labels/Bug {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4992'), ('content-length', '97'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"569c414d87e8ec43ec269a9e28bc2982\"'), ('date', 'Sun, 27 May 2012 09:04:01 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+{\"color\":\"e10c02\",\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Bug\",\"name\":\"Bug\"}\n+\n+GET /repos/jacquev6/PyGithub/labels/Question {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4991'), ('content-length', '107'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"b659c8dcc1212c71f826547c3cc7ae99\"'), ('date', 'Sun, 27 May 2012 09:04:02 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\",\"color\":\"02e10c\"}\n+\n+GET /repos/jacquev6/PyGithub/issues/28/labels {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4990'), ('content-length', '335'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"c9f9beccb03030beaf7b80927da6fef6\"'), ('date', 'Sun, 27 May 2012 09:04:03 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+[{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Bug\",\"name\":\"Bug\",\"color\":\"e10c02\"},{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Project+management\",\"name\":\"Project management\",\"color\":\"444444\"},{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\",\"color\":\"02e10c\"}]\n+\n+DELETE /repos/jacquev6/PyGithub/issues/28/labels/Bug {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4989'), ('content-length', '237'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"46cc70bad88a09b559a5e67089005105\"'), ('date', 'Sun, 27 May 2012 09:04:03 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+[{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Project+management\",\"name\":\"Project management\",\"color\":\"444444\"},{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\",\"color\":\"02e10c\"}]\n+\n+GET /repos/jacquev6/PyGithub/issues/28/labels {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4988'), ('content-length', '237'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"46cc70bad88a09b559a5e67089005105\"'), ('date', 'Sun, 27 May 2012 09:04:04 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+[{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Project+management\",\"name\":\"Project management\",\"color\":\"444444\"},{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\",\"color\":\"02e10c\"}]\n+\n+DELETE /repos/jacquev6/PyGithub/issues/28/labels/Question {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4987'), ('content-length', '129'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"5352ae15c8a5a36c6cace63be9367332\"'), ('date', 'Sun, 27 May 2012 09:04:04 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+[{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Project+management\",\"name\":\"Project management\",\"color\":\"444444\"}]\n+\n+GET /repos/jacquev6/PyGithub/issues/28/labels {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4986'), ('content-length', '129'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"5352ae15c8a5a36c6cace63be9367332\"'), ('date', 'Sun, 27 May 2012 09:04:05 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+[{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Project+management\",\"name\":\"Project management\",\"color\":\"444444\"}]\n+\n+POST /repos/jacquev6/PyGithub/issues/28/labels {'Authorization': 'Basic login_and_password_removed'} [\"Bug\", \"Question\"]\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4985'), ('content-length', '335'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"d135d74d2ea2159d044676a220d41d3a\"'), ('date', 'Sun, 27 May 2012 09:04:06 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+[{\"color\":\"e10c02\",\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Bug\",\"name\":\"Bug\"},{\"color\":\"444444\",\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Project+management\",\"name\":\"Project management\"},{\"color\":\"02e10c\",\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\"}]\n+\n+GET /repos/jacquev6/PyGithub/issues/28/labels {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4984'), ('content-length', '335'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"c9f9beccb03030beaf7b80927da6fef6\"'), ('date', 'Sun, 27 May 2012 09:04:06 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+[{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Bug\",\"name\":\"Bug\",\"color\":\"e10c02\"},{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Project+management\",\"name\":\"Project management\",\"color\":\"444444\"},{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\",\"color\":\"02e10c\"}]\n+","status":"added","deletions":0,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/test/ReplayData/Issue.testAddAndRemoveLabels.txt","changes":45,"additions":45,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/test/ReplayData/Issue.testAddAndRemoveLabels.txt","filename":"test/ReplayData/Issue.testAddAndRemoveLabels.txt"},{"patch":"@@ -0,0 +1,35 @@\n+GET /repos/jacquev6/PyGithub/labels/Bug {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4974'), ('content-length', '97'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"fe2e942523eecb156d100829a6347516\"'), ('date', 'Sun, 27 May 2012 09:06:37 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Bug\",\"name\":\"Bug\",\"color\":\"e10c02\"}\n+\n+GET /repos/jacquev6/PyGithub/labels/Question {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4973'), ('content-length', '107'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"931e58d337b2290717303141eda89cd7\"'), ('date', 'Sun, 27 May 2012 09:06:38 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+{\"color\":\"02e10c\",\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\"}\n+\n+GET /repos/jacquev6/PyGithub/issues/28/labels {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4972'), ('content-length', '335'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"d135d74d2ea2159d044676a220d41d3a\"'), ('date', 'Sun, 27 May 2012 09:06:39 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+[{\"color\":\"e10c02\",\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Bug\",\"name\":\"Bug\"},{\"color\":\"444444\",\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Project+management\",\"name\":\"Project management\"},{\"color\":\"02e10c\",\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\"}]\n+\n+DELETE /repos/jacquev6/PyGithub/issues/28/labels {'Authorization': 'Basic login_and_password_removed'} null\n+204\n+[('status', '204 No Content'), ('x-ratelimit-remaining', '4971'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"d41d8cd98f00b204e9800998ecf8427e\"'), ('date', 'Sun, 27 May 2012 09:06:39 GMT')]\n+\n+\n+GET /repos/jacquev6/PyGithub/issues/28/labels {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4970'), ('content-length', '2'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"d751713988987e9331980363e24189ce\"'), ('date', 'Sun, 27 May 2012 09:06:40 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+[]\n+\n+PUT /repos/jacquev6/PyGithub/issues/28/labels {'Authorization': 'Basic login_and_password_removed'} [\"Bug\", \"Question\"]\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4969'), ('content-length', '207'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"1a56634d9c1050a88592ff55ed8adc62\"'), ('date', 'Sun, 27 May 2012 09:06:40 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+[{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Bug\",\"name\":\"Bug\",\"color\":\"e10c02\"},{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\",\"color\":\"02e10c\"}]\n+\n+GET /repos/jacquev6/PyGithub/issues/28/labels {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4968'), ('content-length', '207'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"1a56634d9c1050a88592ff55ed8adc62\"'), ('date', 'Sun, 27 May 2012 09:06:41 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+[{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Bug\",\"name\":\"Bug\",\"color\":\"e10c02\"},{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\",\"color\":\"02e10c\"}]\n+","status":"added","deletions":0,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/test/ReplayData/Issue.testDeleteAndSetLabels.txt","changes":35,"additions":35,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/test/ReplayData/Issue.testDeleteAndSetLabels.txt","filename":"test/ReplayData/Issue.testDeleteAndSetLabels.txt"},{"patch":"@@ -0,0 +1,5 @@\n+GET /repos/jacquev6/PyGithub/issues/28/labels {'Authorization': 'Basic login_and_password_removed'} null\n+200\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4996'), ('content-length', '335'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"c9f9beccb03030beaf7b80927da6fef6\"'), ('date', 'Sun, 27 May 2012 08:56:31 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+[{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Bug\",\"name\":\"Bug\",\"color\":\"e10c02\"},{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Project+management\",\"name\":\"Project management\",\"color\":\"444444\"},{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\",\"color\":\"02e10c\"}]\n+","status":"added","deletions":0,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/test/ReplayData/Issue.testGetLabels.txt","changes":5,"additions":5,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/test/ReplayData/Issue.testGetLabels.txt","filename":"test/ReplayData/Issue.testGetLabels.txt"},{"patch":"@@ -1,15 +1,15 @@\n GET /user {'Authorization': 'Basic login_and_password_removed'} null\n 200\n-[('status', '200 OK'), ('x-ratelimit-remaining', '4907'), ('content-length', '801'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"99c9bfb75395b749e9913a4729126fb5\"'), ('date', 'Sun, 27 May 2012 07:19:30 GMT'), ('content-type', 'application/json; charset=utf-8')]\n-{\"private_gists\":5,\"type\":\"User\",\"company\":\"Criteo\",\"location\":\"Paris, France\",\"hireable\":false,\"gravatar_id\":\"b68de5ae38616c296fa345d2b9df2225\",\"bio\":\"\",\"following\":24,\"blog\":\"http://vincent-jacques.net\",\"avatar_url\":\"https://secure.gravatar.com/avatar/b68de5ae38616c296fa345d2b9df2225?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\",\"total_private_repos\":5,\"followers\":13,\"owned_private_repos\":5,\"disk_usage\":16976,\"collaborators\":0,\"html_url\":\"https://github.com/jacquev6\",\"url\":\"https://api.github.com/users/jacquev6\",\"name\":\"Vincent Jacques\",\"login\":\"jacquev6\",\"public_repos\":11,\"public_gists\":3,\"email\":\"vincent@vincent-jacques.net\",\"id\":327146,\"plan\":{\"private_repos\":5,\"collaborators\":1,\"name\":\"micro\",\"space\":614400},\"created_at\":\"2010-07-09T06:10:06Z\"}\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4996'), ('content-length', '801'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"8974bb1628a3e3a6d3eb3b08c1b5a46b\"'), ('date', 'Sun, 27 May 2012 07:32:54 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+{\"type\":\"User\",\"bio\":\"\",\"disk_usage\":16976,\"total_private_repos\":5,\"url\":\"https://api.github.com/users/jacquev6\",\"avatar_url\":\"https://secure.gravatar.com/avatar/b68de5ae38616c296fa345d2b9df2225?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\",\"owned_private_repos\":5,\"collaborators\":0,\"plan\":{\"collaborators\":1,\"private_repos\":5,\"name\":\"micro\",\"space\":614400},\"company\":\"Criteo\",\"gravatar_id\":\"b68de5ae38616c296fa345d2b9df2225\",\"login\":\"jacquev6\",\"email\":\"vincent@vincent-jacques.net\",\"public_gists\":3,\"followers\":13,\"name\":\"Vincent Jacques\",\"created_at\":\"2010-07-09T06:10:06Z\",\"blog\":\"http://vincent-jacques.net\",\"location\":\"Paris, France\",\"hireable\":false,\"id\":327146,\"private_gists\":5,\"public_repos\":11,\"following\":24,\"html_url\":\"https://github.com/jacquev6\"}\n \n GET /repos/jacquev6/PyGithub {'Authorization': 'Basic login_and_password_removed'} null\n 200\n-[('status', '200 OK'), ('x-ratelimit-remaining', '4906'), ('content-length', '1129'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"4c20acf0b23f75bbf25106b1a04f65a5\"'), ('date', 'Sun, 27 May 2012 07:19:31 GMT'), ('content-type', 'application/json; charset=utf-8')]\n-{\"description\":\"Python library implementing the full Github API v3\",\"full_name\":\"jacquev6/PyGithub\",\"has_wiki\":false,\"has_issues\":true,\"updated_at\":\"2012-05-27T06:55:28Z\",\"forks\":3,\"mirror_url\":null,\"homepage\":\"http://vincent-jacques.net/PyGithub\",\"ssh_url\":\"git@github.com:jacquev6/PyGithub.git\",\"open_issues\":16,\"fork\":false,\"svn_url\":\"https://github.com/jacquev6/PyGithub\",\"pushed_at\":\"2012-05-27T06:00:28Z\",\"size\":308,\"html_url\":\"https://github.com/jacquev6/PyGithub\",\"private\":false,\"url\":\"https://api.github.com/repos/jacquev6/PyGithub\",\"clone_url\":\"https://github.com/jacquev6/PyGithub.git\",\"owner\":{\"gravatar_id\":\"b68de5ae38616c296fa345d2b9df2225\",\"avatar_url\":\"https://secure.gravatar.com/avatar/b68de5ae38616c296fa345d2b9df2225?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\",\"url\":\"https://api.github.com/users/jacquev6\",\"login\":\"jacquev6\",\"id\":327146},\"name\":\"PyGithub\",\"has_downloads\":true,\"language\":\"Python\",\"watchers\":15,\"git_url\":\"git://github.com/jacquev6/PyGithub.git\",\"id\":3544490,\"permissions\":{\"admin\":true,\"pull\":true,\"push\":true},\"created_at\":\"2012-02-25T12:53:47Z\"}\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4995'), ('content-length', '1129'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"f1e4eb3993a364b66b68ec9db42405bd\"'), ('date', 'Sun, 27 May 2012 07:32:55 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+{\"clone_url\":\"https://github.com/jacquev6/PyGithub.git\",\"has_downloads\":true,\"watchers\":15,\"updated_at\":\"2012-05-27T07:29:24Z\",\"permissions\":{\"pull\":true,\"admin\":true,\"push\":true},\"homepage\":\"http://vincent-jacques.net/PyGithub\",\"url\":\"https://api.github.com/repos/jacquev6/PyGithub\",\"mirror_url\":null,\"has_wiki\":false,\"has_issues\":true,\"fork\":false,\"forks\":3,\"git_url\":\"git://github.com/jacquev6/PyGithub.git\",\"size\":308,\"private\":false,\"open_issues\":16,\"svn_url\":\"https://github.com/jacquev6/PyGithub\",\"owner\":{\"url\":\"https://api.github.com/users/jacquev6\",\"avatar_url\":\"https://secure.gravatar.com/avatar/b68de5ae38616c296fa345d2b9df2225?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\",\"gravatar_id\":\"b68de5ae38616c296fa345d2b9df2225\",\"login\":\"jacquev6\",\"id\":327146},\"name\":\"PyGithub\",\"language\":\"Python\",\"description\":\"Python library implementing the full Github API v3\",\"ssh_url\":\"git@github.com:jacquev6/PyGithub.git\",\"pushed_at\":\"2012-05-27T07:29:24Z\",\"created_at\":\"2012-02-25T12:53:47Z\",\"id\":3544490,\"html_url\":\"https://github.com/jacquev6/PyGithub\",\"full_name\":\"jacquev6/PyGithub\"}\n \n-GET /repos/jacquev6/PyGithub/issues/events/15819975 {'Authorization': 'Basic login_and_password_removed'} null\n+GET /repos/jacquev6/PyGithub/issues/events/16348656 {'Content-Type': 'application/json', 'Authorization': 'Basic login_and_password_removed'} null\n 200\n-[('status', '200 OK'), ('x-ratelimit-remaining', '4905'), ('content-length', '2430'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"a3d244842d23f92f69a23e21626fad11\"'), ('date', 'Sun, 27 May 2012 07:19:31 GMT'), ('content-type', 'application/json; charset=utf-8')]\n-{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/issues/events/15819975\",\"issue\":{\"updated_at\":\"2012-05-26T14:59:33Z\",\"body\":\"Body edited by PyGithub\",\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/issues/28\",\"comments\":0,\"milestone\":{\"creator\":{\"url\":\"https://api.github.com/users/jacquev6\",\"avatar_url\":\"https://secure.gravatar.com/avatar/b68de5ae38616c296fa345d2b9df2225?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\",\"gravatar_id\":\"b68de5ae38616c296fa345d2b9df2225\",\"login\":\"jacquev6\",\"id\":327146},\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/milestones/1\",\"number\":1,\"title\":\"Version 0.4\",\"due_on\":\"2012-03-13T07:00:00Z\",\"closed_issues\":3,\"open_issues\":0,\"created_at\":\"2012-03-08T12:22:10Z\",\"state\":\"closed\",\"description\":\"\",\"id\":93546},\"number\":28,\"assignee\":{\"url\":\"https://api.github.com/users/jacquev6\",\"avatar_url\":\"https://secure.gravatar.com/avatar/b68de5ae38616c296fa345d2b9df2225?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\",\"gravatar_id\":\"b68de5ae38616c296fa345d2b9df2225\",\"login\":\"jacquev6\",\"id\":327146},\"closed_at\":\"2012-05-26T14:59:33Z\",\"title\":\"Issue created by PyGithub\",\"labels\":[{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Bug\",\"name\":\"Bug\",\"color\":\"e10c02\"},{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Project+management\",\"name\":\"Project management\",\"color\":\"444444\"},{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\",\"color\":\"02e10c\"}],\"created_at\":\"2012-05-19T10:38:23Z\",\"state\":\"closed\",\"user\":{\"url\":\"https://api.github.com/users/jacquev6\",\"avatar_url\":\"https://secure.gravatar.com/avatar/b68de5ae38616c296fa345d2b9df2225?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\",\"gravatar_id\":\"b68de5ae38616c296fa345d2b9df2225\",\"login\":\"jacquev6\",\"id\":327146},\"id\":4653757,\"pull_request\":{\"diff_url\":null,\"patch_url\":null,\"html_url\":null},\"html_url\":\"https://github.com/jacquev6/PyGithub/issues/28\"},\"commit_id\":null,\"created_at\":\"2012-05-19T10:38:23Z\",\"event\":\"subscribed\",\"id\":15819975,\"actor\":{\"url\":\"https://api.github.com/users/jacquev6\",\"avatar_url\":\"https://secure.gravatar.com/avatar/b68de5ae38616c296fa345d2b9df2225?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\",\"gravatar_id\":\"b68de5ae38616c296fa345d2b9df2225\",\"login\":\"jacquev6\",\"id\":327146}}\n+[('status', '200 OK'), ('x-ratelimit-remaining', '4994'), ('content-length', '1384'), ('server', 'nginx/1.0.13'), ('connection', 'keep-alive'), ('x-ratelimit-limit', '5000'), ('etag', '\"fefecab09e7355d4ef9875677c2631da\"'), ('date', 'Sun, 27 May 2012 07:32:56 GMT'), ('content-type', 'application/json; charset=utf-8')]\n+{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/issues/events/16348656\",\"issue\":{\"updated_at\":\"2012-05-27T07:27:51Z\",\"body\":\"Body created by PyGithub\",\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/issues/30\",\"comments\":0,\"milestone\":null,\"number\":30,\"assignee\":null,\"closed_at\":null,\"title\":\"Issue also created by PyGithub\",\"labels\":[{\"url\":\"https://api.github.com/repos/jacquev6/PyGithub/labels/Question\",\"name\":\"Question\",\"color\":\"02e10c\"}],\"created_at\":\"2012-05-27T05:40:15Z\",\"state\":\"open\",\"user\":{\"url\":\"https://api.github.com/users/jacquev6\",\"gravatar_id\":\"b68de5ae38616c296fa345d2b9df2225\",\"login\":\"jacquev6\",\"id\":327146,\"avatar_url\":\"https://secure.gravatar.com/avatar/b68de5ae38616c296fa345d2b9df2225?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\"},\"id\":4769659,\"pull_request\":{\"patch_url\":null,\"diff_url\":null,\"html_url\":null},\"html_url\":\"https://github.com/jacquev6/PyGithub/issues/30\"},\"commit_id\":\"ed866fc43833802ab553e5ff8581c81bb00dd433\",\"created_at\":\"2012-05-27T07:29:25Z\",\"event\":\"referenced\",\"id\":16348656,\"actor\":{\"url\":\"https://api.github.com/users/jacquev6\",\"gravatar_id\":\"b68de5ae38616c296fa345d2b9df2225\",\"login\":\"jacquev6\",\"id\":327146,\"avatar_url\":\"https://secure.gravatar.com/avatar/b68de5ae38616c296fa345d2b9df2225?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\"}}\n ","status":"modified","deletions":7,"blob_url":"https://github.com/jacquev6/PyGithub/blob/8a4f306d4b223682dd19410d4a9150636ebe4206/test/ReplayData/IssueEvent.setUp.txt","changes":14,"additions":7,"sha":"8a4f306d4b223682dd19410d4a9150636ebe4206","raw_url":"https://github.com/jacquev6/PyGithub/raw/8a4f306d4b223682dd19410d4a9150636ebe4206/test/ReplayData/IssueEvent.setUp.txt","filename":"test/ReplayData/IssueEvent.setUp.txt"}]

