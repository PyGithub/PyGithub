from __future__ import annotations

from typing import TYPE_CHECKING, Any

from typing_extensions import TypedDict

from github.GithubObject import Attribute, NonCompletableGithubObject, NotSet

if TYPE_CHECKING:
    pass


class SimpleAdvisoryReference(TypedDict):
    """
    A simple reference in a security advisory.
    """

    url: str


class SimplePackage(TypedDict):
    """
    A simple package in an advisory.
    """

    ecosystem: str
    name: str | None


class SimpleVulnerabilityPatchedVersion(TypedDict):
    """
    A simple version identifier in a security advisory.
    """

    identifier: str | None


class DependabotAlertVulnerability(NonCompletableGithubObject):
    """
    A vulnerability represented in a Dependabot alert.
    """

    def _initAttributes(self) -> None:
        self._package: Attribute[SimplePackage] = NotSet
        self._severity: Attribute[str] = NotSet
        self._vulnerable_version_range: Attribute[str | None] = NotSet
        self._first_patched_version: Attribute[SimpleVulnerabilityPatchedVersion] = NotSet

    @property
    def package(self) -> SimplePackage:
        return self._package.value

    @property
    def severity(self) -> str:
        return self._severity.value

    @property
    def vulnerable_version_range(self) -> str | None:
        return self._vulnerable_version_range.value

    @property
    def first_patched_version(self) -> SimpleVulnerabilityPatchedVersion:
        return self._first_patched_version.value

    def _useAttributes(self, attributes: dict[str, Any]) -> None:
        if "package" in attributes:
            self._package = self._makeDictAttribute(
                attributes["package"],
            )
        if "severity" in attributes:
            self._severity = self._makeStringAttribute(attributes["severity"])
        if "vulnerable_version_range" in attributes:
            self._vulnerable_version_range = self._makeStringAttribute(attributes["vulnerable_version_range"])
        if "first_patched_version" in attributes:
            self._first_patched_version = self._makeDictAttribute(
                attributes["first_patched_version"],
            )
